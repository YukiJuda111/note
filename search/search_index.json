{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Yuk1's note","text":"<p>Feel free to view my personal note.</p> <p>My Github repo : Github REPO</p>"},{"location":"about/","title":"My github repos","text":"<p>https://github.com/YukiJuda111?tab=repositories</p>"},{"location":"MiniSQL/cmr/","title":"Catalog Manager","text":""},{"location":"MiniSQL/cmr/#catalog-manager","title":"Catalog Manager \u8bbe\u8ba1\u62a5\u544a","text":""},{"location":"MiniSQL/cmr/#_1","title":"\u4e00\u3001\u6a21\u5757\u63cf\u8ff0","text":"<p>Catalog Manager \u8d1f\u8d23\u7ba1\u7406\u548c\u7ef4\u62a4\u6570\u636e\u5e93\u7684\u6240\u6709\u6a21\u5f0f\u4fe1\u606f\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u6570\u636e\u5e93\u4e2d\u6240\u6709\u8868\u7684\u5b9a\u4e49\u4fe1\u606f\uff0c\u5305\u62ec\u8868\u7684\u540d\u79f0\u3001\u8868\u4e2d\u5b57\u6bb5\uff08\u5217\uff09\u6570\u3001\u4e3b\u952e\u3001\u5b9a\u4e49\u5728\u8be5\u8868\u4e0a\u7684\u7d22\u5f15\u3002</li> <li>\u8868\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5b9a\u4e49\u4fe1\u606f\uff0c\u5305\u62ec\u5b57\u6bb5\u7c7b\u578b\u3001\u662f\u5426\u552f\u4e00\u7b49\u3002</li> <li>\u6570\u636e\u5e93\u4e2d\u6240\u6709\u7d22\u5f15\u7684\u5b9a\u4e49\uff0c\u5305\u62ec\u6240\u5c5e\u8868\u3001\u7d22\u5f15\u5efa\u7acb\u5728\u90a3\u4e2a\u5b57\u6bb5\u4e0a\u7b49\u3002</li> </ul> <p>\u8fd9\u4e9b\u6a21\u5f0f\u4fe1\u606f\u5728\u88ab\u521b\u5efa\u3001\u4fee\u6539\u548c\u5220\u9664\u540e\u8fd8\u5e94\u88ab\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\u6587\u4ef6\u4e2d\u3002\u6b64\u5916\uff0cCatalog Manager\u8fd8\u9700\u8981\u4e3a\u4e0a\u5c42\u7684\u6267\u884c\u5668Executor\u63d0\u4f9b\u516c\u5171\u63a5\u53e3\u4ee5\u4f9b\u6267\u884c\u5668\u83b7\u53d6\u76ee\u5f55\u4fe1\u606f\u5e76\u751f\u6210\u6267\u884c\u8ba1\u5212\u3002</p>"},{"location":"MiniSQL/cmr/#_2","title":"\u4e8c\u3001\u4e3b\u8981\u529f\u80fd","text":"<p><code>CatalogManager</code>\u7c7b\u5e94\u5177\u5907\u7ef4\u62a4\u548c\u6301\u4e45\u5316\u6570\u636e\u5e93\u4e2d\u6240\u6709\u8868\u548c\u7d22\u5f15\u7684\u4fe1\u606f\u7684\u529f\u80fd\u3002<code>CatalogManager</code>\u80fd\u591f\u5728\u6570\u636e\u5e93\u5b9e\u4f8b\uff08<code>DBStorageEngine</code>\uff09\u521d\u6b21\u521b\u5efa\u65f6\uff08<code>init = true</code>\uff09\u521d\u59cb\u5316\u5143\u6570\u636e\uff1b\u5e76\u5728\u540e\u7eed\u91cd\u65b0\u6253\u5f00\u6570\u636e\u5e93\u5b9e\u4f8b\u65f6\uff0c\u4ece\u6570\u636e\u5e93\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6240\u6709\u7684\u8868\u548c\u7d22\u5f15\u4fe1\u606f\uff0c\u6784\u5efa<code>TableInfo</code>\u548c<code>IndexInfo</code>\u4fe1\u606f\u7f6e\u4e8e\u5185\u5b58\u4e2d\u3002\u6b64\u5916\uff0c<code>CatalogManager</code>\u7c7b\u8fd8\u9700\u8981\u5bf9\u4e0a\u5c42\u6a21\u5757\u63d0\u4f9b\u5bf9\u6307\u5b9a\u6570\u636e\u8868\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u5982<code>CreateTable</code>\u3001<code>GetTable</code>\u3001<code>GetTables</code>\u3001<code>DropTable</code>\u3001<code>GetTableIndexes</code>\uff1b\u5bf9\u4e0a\u5c42\u6a21\u5757\u63d0\u4f9b\u5bf9\u6307\u5b9a\u7d22\u5f15\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u5982<code>CreateIndex</code>\u3001<code>GetIndex</code>\u3001<code>DropIndex</code>\u3002</p>"},{"location":"MiniSQL/cmr/#_3","title":"\u4e09\u3001\u8bbe\u8ba1\u601d\u8def","text":""},{"location":"MiniSQL/cmr/#1","title":"1.\u5e8f\u5217\u5316","text":"<p>\u9700\u8981\u4e86\u89e3Catalog, Table, Index\u7684\u5143\u4fe1\u606f\u7684\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u662f\u6c42\u5e8f\u5217\u5316\u7684\u5927\u5c0f\u3002\u53ea\u7528\u901a\u8fc7\u9605\u8bfb\u5143\u4fe1\u606f\u7684<code>SerializeTo</code>\u548c<code>DeserializeFrom</code>\u51fd\u6570\u5c31\u80fd\u77e5\u9053\u5143\u4fe1\u606f\u7531\u54ea\u4e9b\u90e8\u5206\u7ec4\u6210\uff0c\u5e76\u6c42\u5f97\u5927\u5c0f\u3002\u8fd9\u5e76\u4e0d\u662f\u672c\u7ae0\u7684\u96be\u70b9\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002</p>"},{"location":"MiniSQL/cmr/#2indexesinit","title":"2.Indexes\u5bf9\u8c61\u521d\u59cb\u5316\u51fd\u6570Init","text":"<p>\u5206\u6210\u4e09\u6b65\u5b9e\u73b0:</p> <ul> <li>\u521d\u59cb\u5316Index\u7684\u5143\u4fe1\u606f\u548ctable_info</li> <li>\u505akey\u5230key_schema\u7684\u6620\u5c04</li> <li>\u8c03\u7528<code>CreateIndex</code>\u51fd\u6570\u6765\u521b\u5efa\u7d22\u5f15</li> </ul> <p>\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u8d58\u8ff0\u3002</p> <pre><code>void Init(IndexMetadata *meta_data, TableInfo *table_info, BufferPoolManager *buffer_pool_manager) {\n  // Step1: init index metadata and table info\n  // Step2: mapping index key to key schema\n  // Step3: call CreateIndex to create the index\n  meta_data_=meta_data;\n  key_schema_=Schema::ShallowCopySchema(table_info-&gt;GetSchema(), meta_data-&gt;GetKeyMapping());\n  index_=CreateIndex(buffer_pool_manager, \"bptree\");\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#3catalogmanager","title":"3.CatalogManager\u7684\u6784\u9020\u51fd\u6570","text":"<p>\u5728\u4e0a\u5c42\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2aCatalogManager\u7684\u5b9e\u4f8b\uff0c\u5bf9\u5e95\u5c42\u6570\u636e\u8fdb\u884c\u8bbf\u95ee\u5e76\u8bfb\u5165catalog\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u5982\u4e0b\u51e0\u70b9\uff1a</p> <ul> <li>init\u8868\u660e\u662f\u5426\u5df2\u7ecf\u5b58\u5728Meta\u7684\u5b9e\u4f8b\uff0c\u5982\u679cinit\u4e3ature\uff0c\u9700\u8981\u4e3aCatalogMeta\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002</li> <li>\u5206\u522b\u521d\u59cb\u5316table_info,table_meta,index_info,index_meta</li> </ul> <p>\u4ee3\u7801\u5982\u4e0b:</p> <pre><code>CatalogManager::CatalogManager(BufferPoolManager *buffer_pool_manager, LockManager *lock_manager,\n                               LogManager *log_manager, bool init)\n        : buffer_pool_manager_(buffer_pool_manager), lock_manager_(lock_manager), log_manager_(log_manager) {\n    std::atomic_init(&amp;next_table_id_,0);\n    std::atomic_init(&amp;next_index_id_,0);\n    if (init) {\n        catalog_meta_ = CatalogMeta::NewInstance();\n    } else {\n        auto meta_page = buffer_pool_manager_-&gt;FetchPage(CATALOG_META_PAGE_ID);\n        catalog_meta_ = CatalogMeta::DeserializeFrom(meta_page-&gt;GetData());\n        // \u52a0\u8f7dtable\n        for (auto it : catalog_meta_-&gt;table_meta_pages_) {\n            auto table_meta_page = buffer_pool_manager_-&gt;FetchPage(it.second);\n            TableMetadata *table_meta;\n            TableMetadata::DeserializeFrom(table_meta_page-&gt;GetData(), table_meta);\n            auto table_heap = TableHeap::Create(buffer_pool_manager_, table_meta-&gt;GetFirstPageId(), table_meta-&gt;GetSchema(),\n                                                log_manager_, lock_manager_);\n            table_names_[table_meta-&gt;GetTableName()] = table_meta-&gt;GetTableId();\n            TableInfo *table_info = TableInfo::Create();\n            table_info-&gt;Init(table_meta, table_heap);\n            tables_[table_meta-&gt;GetTableId()] = table_info;\n        }\n        // \u52a0\u8f7dindex\n        for (auto it : catalog_meta_-&gt;index_meta_pages_) {\n            auto index_meta_page = buffer_pool_manager_-&gt;FetchPage(it.second);\n            IndexMetadata *index_meta;\n            IndexMetadata::DeserializeFrom(index_meta_page-&gt;GetData(), index_meta);\n            index_names_[tables_[index_meta-&gt;GetTableId()]-&gt;GetTableName()][index_meta-&gt;GetIndexName()] = index_meta-&gt;GetIndexId();\n            auto index_info = IndexInfo::Create();\n            index_info-&gt;Init(index_meta, tables_[index_meta-&gt;GetTableId()], buffer_pool_manager_);\n            indexes_[index_meta-&gt;GetIndexId()] = index_info;\n        }\n    }\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#4createtable","title":"4.CreateTable","text":"<p>\u521b\u5efa\u4e00\u4e2a\u8868\uff0c\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>table_info\u7684\u521d\u59cb\u5316\uff08\u5305\u62ectable_meta\u548ctable_heap\uff09</li> <li>\u5728catalog\u4e2d\u4e3a\u8be5\u8868\u5206\u914d\u4e00\u4e2a\u65b0\u9875\uff0c\u5e76\u66f4\u65b0catalog\u4e2d\u7684tables_\u548ctable_names</li> <li>\u6700\u540e\u5c06catalog\u7684meta\u518dflush\u4e00\u904d</li> </ul> <pre><code>dberr_t CatalogManager::CreateTable(const string &amp;table_name, TableSchema *schema,\n                                    Transaction *txn, TableInfo *&amp;table_info) {\n    if(table_names_.find(table_name) != table_names_.end())\n        return DB_ALREADY_EXIST;\n    table_names_[table_name] = next_table_id_;  // \u66f4\u65b0table_names_\n\n    page_id_t page_id;\n    auto page = buffer_pool_manager_-&gt;NewPage(page_id); // \u5206\u914d\u65b0\u7684page\n    catalog_meta_-&gt;table_meta_pages_[next_table_id_] = page_id; // \u66f4\u65b0catalog_meta_\n\n    table_info = TableInfo::Create();\n    auto new_schema = Schema::DeepCopySchema(schema);\n    auto table_heap = TableHeap::Create(buffer_pool_manager_, new_schema, txn, log_manager_, lock_manager_);\n    auto table_meta = TableMetadata::Create(next_table_id_, table_name, table_heap-&gt;GetFirstPageId(), new_schema);\n    table_info-&gt;Init(table_meta, table_heap);\n    tables_[next_table_id_] = table_info; // \u66f4\u65b0tables_\n\n    next_table_id_ = catalog_meta_-&gt;GetNextTableId(); // \u66f4\u65b0next_table_id_\n    table_meta-&gt;SerializeTo(page-&gt;GetData());\n    buffer_pool_manager_-&gt;UnpinPage(page_id, true);\n    FlushCatalogMetaPage();\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#5gettable","title":"5.GetTable","text":"<p>\u901a\u8fc7table_name\u5f97\u5230table_info\u3002\u4e0d\u8d58\u8ff0</p> <pre><code>dberr_t CatalogManager::GetTable(const string &amp;table_name, TableInfo *&amp;table_info) {\n    if(table_names_.find(table_name)==table_names_.end())\n        return DB_TABLE_NOT_EXIST;\n    auto table_id=table_names_[table_name];\n    table_info=tables_[table_id];\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#6gettables","title":"6.GetTables","text":"<p>\u540c\u4e0a</p> <pre><code>dberr_t CatalogManager::GetTables(vector&lt;TableInfo *&gt; &amp;tables) const {\n    if(tables_.empty()) return DB_FAILED;\n    // \u904d\u5386tables_\uff0c\u5c06\u6240\u6709\u7684table_info\u653e\u5165tables\n    for(auto &amp;it: tables_){\n        tables.emplace_back(it.second);\n    }\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#7createindex","title":"7.CreateIndex","text":"<p>\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff0c\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>index_info\u7684\u521d\u59cb\u5316\uff08\u5305\u62ectable_meta\u548cindex_\uff09</li> <li>\u5728catalog\u4e2d\u4e3a\u8be5\u8868\u5206\u914d\u4e00\u4e2a\u65b0\u9875\uff0c\u5e76\u66f4\u65b0catalog\u4e2d\u7684indexes_\u548cindex_names</li> <li>\u6ce8\u610f\u9700\u8981\u7269\u7406\u4e0a\u63d2\u5165index\uff0c\u8c03\u7528index\u7684<code>InsertEntry</code>\u6765\u5b9e\u73b0</li> <li>\u6700\u540e\u5c06catalog\u7684meta\u518dflush\u4e00\u904d</li> </ul> <pre><code>dberr_t CatalogManager::CreateIndex(const std::string &amp;table_name, const string &amp;index_name,\n                                    const std::vector&lt;std::string&gt; &amp;index_keys, Transaction *txn,\n                                    IndexInfo *&amp;index_info, const string &amp;index_type) {\n    if(table_names_.find(table_name) == table_names_.end())\n        return DB_TABLE_NOT_EXIST;\n    auto&amp; index_map = index_names_[table_name];\n    if(index_map.find(index_name) != index_map.end())\n        return DB_INDEX_ALREADY_EXIST;\n    // \u4e3a\u65b0\u7684index\u5206\u914dpage\n    auto table_id = table_names_[table_name];\n    std::vector&lt;uint32_t&gt; key_map;\n    auto table_info = tables_[table_id];\n    auto schema = table_info-&gt;GetSchema();\n    for(auto &amp;it: index_keys){\n        uint32_t index;\n        if(schema-&gt;GetColumnIndex(it, index) == DB_COLUMN_NAME_NOT_EXIST) return DB_COLUMN_NAME_NOT_EXIST;\n        key_map.push_back(index);\n    } // \u5c06index_keys\u8f6c\u6362\u4e3akey_map\n    auto index_meta = IndexMetadata::Create(next_index_id_, index_name, table_id, key_map);\n    // \u521b\u5efaindex_meta\n    page_id_t page_id;\n    auto page = buffer_pool_manager_-&gt;NewPage(page_id);\n    if(page == nullptr)\n        return DB_FAILED;\n    catalog_meta_-&gt;index_meta_pages_[next_index_id_] = page_id;\n    index_map[index_name] = next_index_id_;\n    index_info = IndexInfo::Create();\n    index_info-&gt;Init(index_meta, table_info, buffer_pool_manager_);\n    indexes_[next_index_id_] = index_info; // \u66f4\u65b0indexes_\n    // \u66f4\u65b0catalog_meta_\n    next_index_id_ = catalog_meta_-&gt;GetNextIndexId();\n    index_meta-&gt;SerializeTo(page-&gt;GetData());\n    buffer_pool_manager_-&gt;UnpinPage(page_id, true);\n\n    //\u9700\u8981\u7269\u7406\u63d2\u5165index\n    auto table_heap = table_info-&gt;GetTableHeap();\n    vector&lt;Field&gt; values;\n    for (auto it = table_heap-&gt;Begin(nullptr); it != table_heap-&gt;End(); it++) {\n        values.clear();\n        for (auto pos : key_map) {\n            values.push_back(*(it-&gt;GetField(pos)));\n        }\n        Row row{values};\n        index_info-&gt;GetIndex()-&gt;InsertEntry(row, it-&gt;GetRowId(), nullptr);\n    }\n    FlushCatalogMetaPage();\n\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#8getindex","title":"8.GetIndex","text":"<p>\u901a\u8fc7table_name,index_name\u5f97\u5230index_info</p> <pre><code>dberr_t CatalogManager::GetIndex(const std::string &amp;table_name, const std::string &amp;index_name,\n                                 IndexInfo *&amp;index_info) const {\n    if(table_names_.find(table_name)==table_names_.end())\n        return DB_TABLE_NOT_EXIST;\n    if(index_names_.at(table_name).find(index_name)==index_names_.at(table_name).end())\n        return DB_INDEX_NOT_FOUND;\n    auto index_id=index_names_.at(table_name).at(index_name);\n    index_info=indexes_.at(index_id);\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#9gettableindexes","title":"9.GetTableIndexes","text":"<p>\u540c\u4e0a</p> <pre><code>dberr_t CatalogManager::GetTableIndexes(const std::string &amp;table_name, std::vector&lt;IndexInfo *&gt; &amp;indexes) const {\n    if(table_names_.find(table_name)==table_names_.end())\n        return DB_TABLE_NOT_EXIST;\n    for(auto &amp;it: indexes_){\n        indexes.push_back(it.second);\n    }\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#10droptable","title":"10.DropTable","text":"<p>\u5220\u9664table\uff0c\u9700\u8981\u5220\u9664\uff1a</p> <ul> <li>table_names_</li> <li>tables_</li> <li>Table_meta_pages</li> </ul> <pre><code>dberr_t CatalogManager::DropTable(const string &amp;table_name) {\n    if(table_names_.find(table_name)==table_names_.end())\n        return DB_TABLE_NOT_EXIST;\n    auto table_id=table_names_[table_name];\n    table_names_.erase(table_name);\n\n    auto page_id=catalog_meta_-&gt;table_meta_pages_[table_id];\n    catalog_meta_-&gt;table_meta_pages_.erase(table_id);\n\n    buffer_pool_manager_-&gt;DeletePage(page_id);  //\u5220\u9664page\n    tables_.erase(table_id);\n    FlushCatalogMetaPage();\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#11dropindex","title":"11.DropIndex","text":"<p>\u5220\u9664index\uff0c\u9700\u8981\u5220\u9664\uff1a</p> <ul> <li>index_names</li> <li>indexes_</li> <li>index_meta_pages_</li> </ul> <pre><code>dberr_t CatalogManager::DropIndex(const string &amp;table_name, const string &amp;index_name) {\n    if(table_names_.find(table_name) == table_names_.end())\n        return DB_TABLE_NOT_EXIST;\n    if(index_names_.at(table_name).find(index_name) == index_names_.at(table_name).end())\n        return DB_INDEX_NOT_FOUND;\n\n    auto index_id = index_names_.at(table_name).at(index_name);\n    index_names_.at(table_name).erase(index_name); // \u5220\u9664index_name\n    auto page_id = catalog_meta_-&gt;index_meta_pages_[index_id];\n    catalog_meta_-&gt;index_meta_pages_.erase(index_id);\n\n    buffer_pool_manager_-&gt;DeletePage(page_id); // \u5220\u9664index_meta_page\n    indexes_.erase(index_id); // \u5220\u9664index\n    FlushCatalogMetaPage();\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#12flushcatalogmetapage","title":"12.FlushCatalogMetaPage","text":"<p>\u6bcf\u6b21\u9700\u8981\u66f4\u65b0catalog\u90fd\u9700\u8981flush</p> <pre><code>dberr_t CatalogManager::FlushCatalogMetaPage() const {\n    auto page=buffer_pool_manager_-&gt;FetchPage(CATALOG_META_PAGE_ID);\n    catalog_meta_-&gt;SerializeTo(page-&gt;GetData());\n    buffer_pool_manager_-&gt;UnpinPage(CATALOG_META_PAGE_ID, true);\n    if(!buffer_pool_manager_-&gt;FlushPage(CATALOG_META_PAGE_ID))\n        return DB_FAILED;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#13loadtableunused","title":"13.LoadTable(unused)","text":"<p>\u6839\u636epage id\u4ecemeta data\u4e2d\u62ff\u5230table\u7684\u4fe1\u606f\u5e76\u5728catalog\u4e2d\u66f4\u65b0</p> <pre><code>dberr_t CatalogManager::LoadTable(const table_id_t table_id, const page_id_t page_id) {\n    if(tables_.find(table_id)==tables_.end())\n        return DB_TABLE_NOT_EXIST;\n\n    auto table_meta_page=buffer_pool_manager_-&gt;FetchPage(page_id);\n    TableMetadata *table_meta;\n    TableMetadata::DeserializeFrom(table_meta_page-&gt;GetData(), table_meta);\n    table_names_[table_meta-&gt;GetTableName()]=table_id;//\u66f4\u65b0table_names_\n    TableHeap* table_heap=TableHeap::Create(buffer_pool_manager_, page_id, table_meta-&gt;GetSchema(), log_manager_, lock_manager_);\n    TableInfo* table_info=TableInfo::Create();\n    table_info-&gt;Init(table_meta, table_heap);\n    tables_[table_id]=table_info; //\u66f4\u65b0tables_\n    catalog_meta_-&gt;table_meta_pages_[table_id]=page_id; //\u66f4\u65b0catalog_meta_\n    FlushCatalogMetaPage();\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#14loadindexunused","title":"14.LoadIndex(unused)","text":"<p>\u6839\u636eindex id\u4ecemeta data\u4e2d\u62ff\u5230index\u7684\u4fe1\u606f\u5e76\u5728catalog\u4e2d\u66f4\u65b0</p> <pre><code>dberr_t CatalogManager::LoadIndex(const index_id_t index_id, const page_id_t page_id) {\n    if(indexes_.find(index_id) != indexes_.end()){\n        return DB_INDEX_NOT_FOUND;\n    }\n\n    auto index_meta_page = buffer_pool_manager_-&gt;FetchPage(page_id);\n    IndexMetadata *index_meta;\n    IndexMetadata::DeserializeFrom(index_meta_page-&gt;GetData(),index_meta);\n    auto table_name = tables_[index_meta-&gt;GetTableId()]-&gt;GetTableName();\n    index_names_[table_name][index_meta-&gt;GetIndexName()] = index_id; //\u8f7d\u5165index_names_\n\n    auto index_info = IndexInfo::Create();\n    index_info-&gt;Init(index_meta,tables_[index_meta-&gt;GetTableId()],buffer_pool_manager_);\n    indexes_[index_id] = index_info; //\u8f7d\u5165indexes_\n\n    catalog_meta_-&gt;index_meta_pages_[index_id] = page_id; //\u8f7d\u5165index_meta_pages_\n    FlushCatalogMetaPage();\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#15gettable","title":"15.GetTable","text":"<p>\u6839\u636etable_id\u5728\u76ee\u5f55\u4e2d\u62ff\u5230table_info\u7684\u6307\u9488</p> <pre><code>dberr_t CatalogManager::GetTable(const table_id_t table_id, TableInfo *&amp;table_info) {\n    if(catalog_meta_-&gt;table_meta_pages_.find(table_id) == catalog_meta_-&gt;table_meta_pages_.end()){\n        return DB_TABLE_NOT_EXIST;\n    }\n    table_info = tables_[table_id];\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/cmr/#_4","title":"\u4e94\u3001\u6a21\u5757\u6d4b\u8bd5\u7ed3\u679c","text":""},{"location":"MiniSQL/per/","title":"Planner and Executor","text":""},{"location":"MiniSQL/per/#planner-executor","title":"Planner &amp; Executor \u8bbe\u8ba1\u62a5\u544a","text":""},{"location":"MiniSQL/per/#_1","title":"\u4e00\u3001\u6a21\u5757\u63cf\u8ff0","text":"<p>\u672c\u5b9e\u9a8c\u4e3b\u8981\u5305\u62ecPlanner\u548cExecutor\u4e24\u90e8\u5206\u3002Planner\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5c06\u89e3\u91ca\u5668\uff08Parser\uff09\u751f\u6210\u7684\u8bed\u6cd5\u6811\uff0c\u6539\u5199\u6210\u6570\u636e\u5e93\u53ef\u4ee5\u7406\u89e3\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u5c06\u6240\u6709sql\u8bed\u53e5\u4e2d\u7684\u6807\u8bc6\u7b26\uff08Identifier\uff09\u89e3\u6790\u6210\u6ca1\u6709\u6b67\u4e49\u7684\u5b9e\u4f53\uff0c\u5373\u5404\u79cdC++\u7684\u7c7b\uff0c\u5e76\u901a\u8fc7Catalog Manager \u63d0\u4f9b\u7684\u4fe1\u606f\u751f\u6210\u6267\u884c\u8ba1\u5212\u3002Executor\u904d\u5386\u67e5\u8be2\u8ba1\u5212\u6811\uff0c\u5c06\u6811\u4e0a\u7684 PlanNode \u66ff\u6362\u6210\u5bf9\u5e94\u7684 Executor\uff0c\u968f\u540e\u8c03\u7528 Record Manager\u3001Index Manager \u548c Catalog Manager \u63d0\u4f9b\u7684\u76f8\u5e94\u63a5\u53e3\u8fdb\u884c\u6267\u884c\uff0c\u5e76\u5c06\u6267\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e0a\u5c42\u6a21\u5757\u3002</p>"},{"location":"MiniSQL/per/#_2","title":"\u4e8c\u3001\u4e3b\u8981\u529f\u80fd","text":"<p>\u5bf9\u4e8e\u7b80\u5355\u7684\u8bed\u53e5\u4f8b\u5982show databases\uff0cdrop table \u7b49\uff0c\u751f\u6210\u7684\u8bed\u6cd5\u6811\u4e5f\u975e\u5e38\u7b80\u5355\u3002\u4ee5show databases\u4e3a\u4f8b\uff0c\u5bf9\u5e94\u7684\u8bed\u6cd5\u6811\u53ea\u6709\u5355\u8282\u70b9kNodeShowDB\uff0c\u8868\u793a\u5c55\u793a\u6240\u6709\u6570\u636e\u5e93\u3002\u6b64\u65f6\u65e0\u9700\u4f20\u5165Planner\u751f\u6210\u6267\u884c\u8ba1\u5212\uff0c\u6211\u4eec\u76f4\u63a5\u8c03\u7528\u5bf9\u5e94\u7684\u6267\u884c\u51fd\u6570\u6267\u884c\u5373\u53ef\u3002</p> <p>\u5bf9\u4e8e\u590d\u6742\u7684\u8bed\u53e5\uff0c\u751f\u6210\u7684\u8bed\u6cd5\u6811\u9700\u4f20\u5165Planner\u751f\u6210\u6267\u884c\u8ba1\u5212\uff0c\u5e76\u4ea4\u7531Executor\u8fdb\u884c\u6267\u884c\u3002Planner\u9700\u8981\u5148\u904d\u5386\u8bed\u6cd5\u6811\uff0c\u8c03\u7528Catalog Manager \u68c0\u67e5\u8bed\u6cd5\u6811\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u6b63\u786e\uff0c\u5982\u8868\u3001\u5217\u662f\u5426\u5b58\u5728\uff0c\u8c13\u8bcd\u7684\u503c\u7c7b\u578b\u662f\u5426\u4e0ecolumn\u7c7b\u578b\u5bf9\u5e94\u7b49\u7b49\uff0c\u968f\u540e\u5c06\u8fd9\u4e9b\u8bcd\u8bed\u62bd\u8c61\u6210\u76f8\u5e94\u7684\u8868\u8fbe\u5f0f\u3002\u89e3\u6790\u5b8c\u6210\u540e\uff0cPlanner\u6839\u636e\u6539\u5199\u8bed\u6cd5\u6811\u540e\u751f\u6210\u7684\u53ef\u4ee5\u7406\u89e3\u7684Statement\u7ed3\u6784\uff0c\u751f\u6210\u5bf9\u5e94\u7684Plannode\uff0c\u5e76\u5c06Planndoe\u4ea4\u7531executor\u8fdb\u884c\u6267\u884c\u3002</p> <p>EXcutor\u91c7\u7528\u7684\u662fIterator Model\uff1a\u6267\u884c\u5f15\u64ce\u4f1a\u5c06\u6574\u4e2a SQL \u6784\u5efa\u6210\u4e00\u4e2a Operator \u6811\uff0c\u67e5\u8be2\u6811\u81ea\u9876\u5411\u4e0b\u7684\u8c03\u7528\u63a5\u53e3\uff0c\u6570\u636e\u5219\u81ea\u5e95\u5411\u4e0a\u7684\u88ab\u62c9\u53d6\u5904\u7406\u3002\u6bcf\u4e00\u79cd\u64cd\u4f5c\u4f1a\u62bd\u8c61\u4e3a\u4e00\u4e2a Operator\uff0c\u6bcf\u4e2a\u7b97\u5b50\u90fd\u6709 Init() \u548c Next() \u4e24\u4e2a\u65b9\u6cd5\u3002Init() \u5bf9\u7b97\u5b50\u8fdb\u884c\u521d\u59cb\u5316\u5de5\u4f5c\u3002Next() \u5219\u662f\u5411\u4e0b\u5c42\u7b97\u5b50\u8bf7\u6c42\u4e0b\u4e00\u6761\u6570\u636e\u3002\u5f53 Next() \u8fd4\u56de false \u65f6\uff0c\u5219\u4ee3\u8868\u4e0b\u5c42\u7b97\u5b50\u5df2\u7ecf\u6ca1\u6709\u5269\u4f59\u6570\u636e\uff0c\u8fed\u4ee3\u7ed3\u675f\u3002</p>"},{"location":"MiniSQL/per/#_3","title":"\u4e09\u3001\u8bbe\u8ba1\u601d\u8def","text":""},{"location":"MiniSQL/per/#1seqscanexecutor","title":"1.SeqScanExecutor","text":"<p>SeqScanExecutor \u5bf9\u8868\u6267\u884c\u4e00\u6b21\u987a\u5e8f\u626b\u63cf\uff0c\u4e00\u6b21Next()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u7b26\u5408\u8c13\u8bcd\u6761\u4ef6\u7684\u884c\u3002\u987a\u5e8f\u626b\u63cf\u7684\u8868\u540d\u548c\u8c13\u8bcd\uff08Predicate\uff09\u7531SeqScanPlanNode \u6307\u5b9a\u3002</p> <p>\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u6700\u540e\u6839\u636eOutputSchema\u6765\u83b7\u5f97\u8fc7\u6ee4\u540e\u7684column\uff0c\u5373\u9700\u8981\u8f93\u51fa\u7684column\u3002</li> </ul> <pre><code>//\n// Created by njz on 2023/1/17.\n//\n#include \"executor/executors/seq_scan_executor.h\"\n\n/**\n* TODO: Student Implement\n*/\nSeqScanExecutor::SeqScanExecutor(ExecuteContext *exec_ctx, const SeqScanPlanNode *plan)\n        : AbstractExecutor(exec_ctx),\n          plan_(plan){\n    exec_ctx_-&gt;GetCatalog()-&gt;GetTable(plan_-&gt;GetTableName(),table_info_);\n}\n\nvoid SeqScanExecutor::Init() {\n    table_iter_ = table_info_-&gt;GetTableHeap()-&gt;Begin(exec_ctx_-&gt;GetTransaction());\n}\n\nbool SeqScanExecutor::Next(Row *row, RowId *rid) {\n    do{\n        if(table_iter_ == table_info_-&gt;GetTableHeap()-&gt;End())\n            return false;\n        *row = *table_iter_;\n        *rid = row-&gt;GetRowId();\n        table_iter_++;\n    }while(plan_-&gt;GetPredicate() != nullptr &amp;&amp; !plan_-&gt;GetPredicate()-&gt;Evaluate(row).CompareEquals(Field(kTypeInt, 1)));\n\n    auto schema = plan_-&gt;OutputSchema();\n    std::vector&lt;Field&gt; values;\n    for(auto &amp;col : schema-&gt;GetColumns()){\n        uint32_t idx;\n        table_info_-&gt;GetSchema()-&gt;GetColumnIndex(col-&gt;GetName(),idx);\n        values.emplace_back(*row-&gt;GetField(idx));\n    }\n    *row = Row{values};\n    return true;\n}\n</code></pre>"},{"location":"MiniSQL/per/#2indexscanexecutor","title":"2.IndexScanExecutor","text":"<p>IndexScanExecutor \u5bf9\u8868\u6267\u884c\u4e00\u6b21\u5e26\u7d22\u5f15\u7684\u626b\u63cf\uff0c\u4e00\u6b21Next()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u7b26\u5408\u8c13\u8bcd\u6761\u4ef6\u7684\u884c\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0cIndexScan\u4ec5\u652f\u6301\u5355\u5217\u7d22\u5f15\u3002\u5f53Planner\u68c0\u6d4b\u5230select\u7684\u8c13\u8bcd\u4e2d\u7684\u5217\u4e0a\u5b58\u5728\u7d22\u5f15\uff0c\u800c\u4e14\u7d22\u5f15\u53ea\u5305\u542b\u8be5\u5217\u65f6\uff0c\u4f1a\u751f\u6210IndexScanPlan\uff0c\u5176\u4ed6\u60c5\u51b5\u5219\u751f\u6210SeqScanPlan\u3002\u540c\u65f6\uff0c\u4e3a\u7b80\u5355\u8d77\u89c1\uff0cIndexScan\u4e0d\u652f\u6301\u8c13\u8bcd\u4e2d\u5b58\u5728or\u7684\u60c5\u51b5\uff08\u4f8b\u5982a=1 or b=2\uff0c\u6b64\u65f6a\u5217\u5b58\u5728\u7d22\u5f15\uff0cb\u5217\u4e0d\u5b58\u5728\u7d22\u5f15\uff0c\u6211\u4eec\u4ecd\u9700\u987a\u5e8f\u626b\u63cf\u8868\u6765\u627e\u51fa\u7b26\u5408b=2\u6761\u4ef6\u7684\u5217\uff09\u3002\u56e0\u6b64\uff0c\u5728IndexScanExecutor\u4e2d\u4f60\u53ea\u9700\u8981\u8003\u8651\u5355\u5217\u7d22\u5f15\uff0c\u5e76\u4e14\u4e0d\u7528\u8003\u8651\u8c13\u8bcd\u4e2d\u5b58\u5728or\u7684\u60c5\u51b5\u3002</p> <p>\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u8c03\u7528index\u4e2d\u7684<code>ScanKey</code>\u53ef\u4ee5\u8fd4\u56de\u5355\u5217\u7d22\u5f15\u9700\u8981\u7684\u7ed3\u679c</li> <li>\u6240\u6709\u7d22\u5f15\u7684\u7ed3\u679c\u53d6\u4ea4\u96c6\u5c31\u662f\u6700\u7ec8\u7ed3\u679c</li> <li>\u5982\u679c\u67d0\u4e2a\u8c13\u8bcd\u6ca1\u6709\u7d22\u5f15\u8fd8\u9700\u8981\u8c03\u7528<code>GetPredicate</code>\u6765\u5224\u65ad</li> <li>\u6240\u6709\u7d22\u5f15\u7684\u7ed3\u679c\u53d6\u4ea4\u96c6\u7684\u67e5\u8be2\u6548\u7387\u5176\u5b9e\u662f\u6bd4\u8f83\u4f4e\u4e0b\u7684</li> </ul> <pre><code>#include \"executor/executors/index_scan_executor.h\"\n#include &lt;algorithm&gt;\n\n// Student added function\npair&lt;string, Field&gt; FindIndexVal(AbstractExpression *node, uint32_t col_idx) {\n  ComparisonExpression *comparisonNode = nullptr;\n  string comparisonType;\n  ColumnValueExpression *col = nullptr;\n  ConstantValueExpression *cons = nullptr;\n  auto type = node-&gt;GetType();\n  if (type == ExpressionType::LogicExpression) {\n    for (const auto &amp;child : node-&gt;GetChildren()) {\n      pair&lt;string, Field&gt; field = FindIndexVal(&amp;*(child), col_idx);\n      if (!field.second.IsNull()) {\n        return field;\n      }\n    }\n  } else if (type == ExpressionType::ComparisonExpression) {\n    comparisonNode = dynamic_cast&lt;ComparisonExpression *&gt;(&amp;*node);\n    comparisonType = comparisonNode-&gt;GetComparisonType();\n    if (node-&gt;GetChildAt(0)-&gt;GetType() == ExpressionType::ColumnExpression &amp;&amp; node-&gt;GetChildAt(0)) {\n      col = dynamic_cast&lt;ColumnValueExpression *&gt;(&amp;*node-&gt;GetChildAt(0));\n      if (col-&gt;GetColIdx() == col_idx) {\n        cons = dynamic_cast&lt;ConstantValueExpression *&gt;(&amp;*node-&gt;GetChildAt(1));\n        return pair&lt;string, Field&gt;(comparisonType, Field(cons-&gt;val_));\n      } else {\n        return pair&lt;string, Field&gt;(\"\", Field(TypeId::kTypeInvalid));\n      }\n    }\n  } else\n    return pair&lt;string, Field&gt;(\"\", Field(TypeId::kTypeInvalid));\n}\n\nbool RowIdComp(RowId a, RowId b) {\n  return a.GetPageId() &gt; b.GetPageId() || (a.GetPageId() == b.GetPageId() &amp;&amp; a.GetSlotNum() &gt; b.GetSlotNum());\n}\n\n/**\n * TODO: Student Implement\n */\nIndexScanExecutor::IndexScanExecutor(ExecuteContext *exec_ctx, const IndexScanPlanNode *plan)\n    : AbstractExecutor(exec_ctx), plan_(plan) {\n  exec_ctx_-&gt;GetCatalog()-&gt;GetTable(plan_-&gt;GetTableName(), table_info_);\n  original_schema_ = table_info_-&gt;GetSchema();\n}\n\nvoid IndexScanExecutor::Init() {\n  pair&lt;string, Field&gt; *res;\n  unordered_map&lt;IndexInfo *, pair&lt;string, Field *&gt;&gt; index_val;\n  for (auto index : plan_-&gt;indexes_) {\n    auto col_idx = index-&gt;GetIndexKeySchema()-&gt;GetColumn(0)-&gt;GetTableInd();\n    AbstractExpression *node = &amp;*(plan_-&gt;filter_predicate_);\n    res = new pair&lt;string, Field&gt;(FindIndexVal(node, col_idx));\n    index_val[index].first = res-&gt;first;\n    index_val[index].second = &amp;res-&gt;second;\n  }\n\n  for (auto index : plan_-&gt;indexes_) {\n    vector&lt;Field&gt; row;\n    vector&lt;RowId&gt; results, prevRes;\n    index_results_.swap(prevRes);\n    row.emplace_back(*index_val[index].second);\n    index-&gt;GetIndex()-&gt;ScanKey(Row(row), results, nullptr, index_val[index].first);\n    sort(results.begin(), results.end(), RowIdComp);\n    if (*plan_-&gt;indexes_.begin() != index) {\n      std::set_intersection(results.begin(), results.end(), prevRes.begin(), prevRes.end(),\n                            std::back_inserter(index_results_), RowIdComp);\n    } else {\n      index_results_ = results;\n    }\n  }\n  iter_ = index_results_.begin();\n}\n\nbool IndexScanExecutor::Next(Row *row, RowId *rid) {\n  while (iter_ != index_results_.end()) {\n    Row *tuple = new Row(*iter_);\n    table_info_-&gt;GetTableHeap()-&gt;GetTuple(tuple, nullptr);\n    if (plan_-&gt;GetPredicate()-&gt;Evaluate(tuple).CompareEquals(Field(kTypeInt, 1))) {\n      vector&lt;Field&gt; fields;\n      for (auto column : original_schema_-&gt;GetColumns()) {\n        for (auto target : plan_-&gt;OutputSchema()-&gt;GetColumns()) {\n          if (!target-&gt;GetName().compare(column-&gt;GetName())) {\n            fields.push_back(*tuple-&gt;GetField(column-&gt;GetTableInd()));\n          }\n        }\n      }\n      *row = Row(fields);\n      row-&gt;SetRowId(*iter_);\n      delete tuple;\n      *rid = *iter_;\n      ++iter_;\n      return true;\n    }\n    delete tuple;\n    iter_++;\n  }\n  return false;\n}\n</code></pre>"},{"location":"MiniSQL/per/#3insertexecutor","title":"3.InsertExecutor","text":"<p>InsertExecutor \u5c06\u884c\u63d2\u5165\u8868\u4e2d\u5e76\u66f4\u65b0\u7d22\u5f15\u3002\u76ee\u524d\uff0cParser\u53ea\u652f\u6301\u76f4\u63a5\u63d2\u5165<code>insert into t1 values(1, \"aaa\", null, 2.33);</code>\uff0c\u4e0d\u652f\u6301 INSERT INTO .. SELECT ...\u7684\u8bed\u6cd5\u3002\u8981\u63d2\u5165\u7684\u503c\u901a\u8fc7ValueExecutor\u751f\u6210\u5bf9\u5e94\u7684\u884c\uff0c\u968f\u540e\u88ab\u62c9\u53d6\u5230InsertExecutor\u4e2d\u3002</p> <p>\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u63d2\u5165\u9700\u8981\u68c0\u67e5primary key\u548cunique\u662f\u5426\u91cd\u590d\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86\u63d2\u5165\u6548\u7387</li> <li>\u63d2\u5165\u7684\u540c\u65f6\u8981\u5bf9\u7d22\u5f15\u8fdb\u884c\u66f4\u65b0\uff0c\u4e5f\u4f1a\u5f71\u54cd\u5230\u63d2\u5165\u6548\u7387</li> </ul> <pre><code>//\n// Created by njz on 2023/1/27.\n//\n\n#include \"executor/executors/insert_executor.h\"\n\nInsertExecutor::InsertExecutor(ExecuteContext *exec_ctx, const InsertPlanNode *plan,\n                               std::unique_ptr&lt;AbstractExecutor&gt; &amp;&amp;child_executor)\n    : AbstractExecutor(exec_ctx), plan_(plan), child_executor_(std::move(child_executor)) {}\n\nvoid InsertExecutor::Init() {\n  child_executor_-&gt;Init();\n\n}\n\nbool InsertExecutor::Next([[maybe_unused]] Row *row, RowId *rid) {\n  string table_name_=plan_-&gt;GetTableName();\n  auto catalog_mgr_=exec_ctx_-&gt;GetCatalog();\n  TableInfo* table_info_;\n  catalog_mgr_-&gt;GetTable(table_name_, table_info_);\n  auto table_heap_=table_info_-&gt;GetTableHeap();\n  std::vector&lt;IndexInfo* &gt;table_indexes_;\n  catalog_mgr_-&gt;GetTableIndexes(table_name_, table_indexes_);\n    if(child_executor_-&gt;Next(row, rid)){\n      for(auto index: table_indexes_){\n        if(index-&gt;GetIndexName().find(\"UNIQUE_\")==0&amp;&amp;index-&gt;GetIndexKeySchema()-&gt;GetColumnCount()==1){  //index\u5b57\u6bb5\u5305\u542bunique\u5c31\u884c\n          uint32_t col_ind=index-&gt;GetIndexKeySchema()-&gt;GetColumn(0)-&gt;GetTableInd(); //\u627e\u5230\u7d22\u5f15\u5bf9\u5e94\u7684\u5217\n          Field* val=row-&gt;GetField(col_ind);\n          std::vector&lt;Field&gt; key_tmp{Field(*val)};\n          Row key=Row(key_tmp);\n          std::vector&lt;RowId&gt;res;\n          index-&gt;GetIndex()-&gt;ScanKey(key, res, exec_ctx_-&gt;GetTransaction(), \"=\"); //\u627e\u4e4b\u524d\u7684\u6709\u6ca1\u6709\u76f8\u540c\u7684\n          if(!res.empty()){ //\u4e4b\u524d\u6709\u76f8\u540c\u7684\n            std::cout&lt;&lt;\"uni constraint conflict\"&lt;&lt;std::endl;\n            return false;\n          }\n        }\n        if(index-&gt;GetIndexName().compare(\"PRIMARY_\")==0&amp;&amp;index-&gt;GetIndexKeySchema()-&gt;GetColumnCount()==1){\n          uint32_t col_ind=index-&gt;GetIndexKeySchema()-&gt;GetColumn(0)-&gt;GetTableInd(); //\u627e\u5230\u7d22\u5f15\u5bf9\u5e94\u7684\u5217\n          Field* val=row-&gt;GetField(col_ind);\n          std::vector&lt;Field&gt; key_tmp{Field(*val)};\n          Row key=Row(key_tmp);\n          std::vector&lt;RowId&gt;res;\n          index-&gt;GetIndex()-&gt;ScanKey(key, res, exec_ctx_-&gt;GetTransaction(), \"=\"); //\u627e\u4e4b\u524d\u7684\u6709\u6ca1\u6709\u76f8\u540c\u7684\n          if(!res.empty()){ //\u4e4b\u524d\u6709\u76f8\u540c\u7684\n            std::cout&lt;&lt;\"primary key constraint conflict\"&lt;&lt;std::endl;\n            return false;\n          }\n        }\n      }\n      bool is_inserted=table_heap_-&gt;InsertTuple(*row, exec_ctx_-&gt;GetTransaction());\n      if(!is_inserted)\n        return false;\n      for(auto ind: table_indexes_){\n        uint32_t col_index=ind-&gt;GetIndexKeySchema()-&gt;GetColumn(0)-&gt;GetTableInd();\n        Field* val=row-&gt;GetField(col_index);\n        std::vector&lt;Field&gt; key_tmp{Field(*val)};\n        Row key=Row(key_tmp);\n        ind-&gt;GetIndex()-&gt;InsertEntry(key, row-&gt;GetRowId(), exec_ctx_-&gt;GetTransaction());\n      }\n      *rid=row-&gt;GetRowId();\n      //std::cout&lt;&lt;\"success to insert to\"&lt;&lt;table_name_&lt;&lt;std::endl;\n      return true;\n    }\n  return false;\n}\n</code></pre>"},{"location":"MiniSQL/per/#4updataexecutor","title":"4.UpdataExecutor","text":"<p>UpdateExecutor \u4fee\u6539\u6307\u5b9a\u8868\u4e2d\u7684\u73b0\u6709\u884c\u5e76\u66f4\u65b0\u5176\u7d22\u5f15\u3002UpdatePlanNode \u5c06\u6709\u4e00\u4e2a SeqScanPlanNode \u4f5c\u4e3a\u5176\u5b50\u8282\u70b9\uff0c\u8981\u66f4\u65b0\u7684\u503c\u901a\u8fc7SeqScanExecutor\u63d0\u4f9b\u3002</p> <p>\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u63d2\u5165\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u539f\u6765\u7684row\u66ff\u6362\u6210\u65b0\u7684row</li> <li>\u5bf9\u7d22\u5f15\u7684\u7ef4\u62a4\u4e5f\u662f\u5c06\u539f\u5148\u7684key\u5220\u9664\uff0c\u518d\u63d2\u5165\u65b0\u7684key</li> </ul> <pre><code>//\n// Created by njz on 2023/1/30.\n//\n\n#include \"executor/executors/update_executor.h\"\n\nUpdateExecutor::UpdateExecutor(ExecuteContext *exec_ctx, const UpdatePlanNode *plan,\n                               std::unique_ptr&lt;AbstractExecutor&gt; &amp;&amp;child_executor)\n    : AbstractExecutor(exec_ctx), plan_(plan), child_executor_(std::move(child_executor)) {}\n\n/**\n* TODO: Student Implement\n*/\nvoid UpdateExecutor::Init() {\n  child_executor_-&gt;Init();\n  catalog_mgr_=exec_ctx_-&gt;GetCatalog();\n  table_name_=plan_-&gt;GetTableName();\n  catalog_mgr_-&gt;GetTable(table_name_, table_info_);\n  table_heap_=table_info_-&gt;GetTableHeap();\n  catalog_mgr_-&gt;GetTableIndexes(table_name_, table_indexes_);\n  schema_=table_info_-&gt;GetSchema();\n  update_attrs_=plan_-&gt;GetUpdateAttr();\n  column_cnt=schema_-&gt;GetColumnCount();\n}\n\nbool UpdateExecutor::Next([[maybe_unused]] Row *row, RowId *rid) {\n  if(child_executor_-&gt;Next(row, rid)){\n    Row update_row=GenerateUpdatedTuple(*row);\n    bool is_updated=table_heap_-&gt;UpdateTuple(update_row, *rid, exec_ctx_-&gt;GetTransaction());\n    if(!is_updated)\n      return false;\n    for(auto index: table_indexes_){\n      Row key_row;\n      row-&gt;GetKeyFromRow(schema_, index-&gt;GetIndexKeySchema(), key_row);\n      index-&gt;GetIndex()-&gt;RemoveEntry(key_row, *rid, exec_ctx_-&gt;GetTransaction());\n      update_row.GetKeyFromRow(schema_, index-&gt;GetIndexKeySchema(), key_row);\n      index-&gt;GetIndex()-&gt;InsertEntry(key_row, *rid, exec_ctx_-&gt;GetTransaction());\n    }\n    return true;\n  }\n  return false;\n}\n\nRow UpdateExecutor::GenerateUpdatedTuple(const Row &amp;row) {\n  //auto update_attrs=plan_-&gt;GetUpdateAttr();\n  std::vector&lt;Field&gt; update_row;\n  for(uint32_t i=0; i&lt;column_cnt; i++){\n    if(update_attrs_.find(i)==update_attrs_.end()){ //\u4e0d\u662f\u8981\u66f4\u65b0\u7684\n      update_row.emplace_back(*row.GetField(i));\n    }\n    else{ //\u662f\u8981\u66f4\u65b0\u7684field\u5c31\u65b0\u5efa\u4e00\u4e2a\n      Field new_field=update_attrs_.at(i)-&gt;Evaluate(nullptr);\n      update_row.emplace_back(new_field);\n    }\n  }\n  return Row(update_row);\n  //return Row();\n}\n</code></pre>"},{"location":"MiniSQL/per/#5deleteexecutor","title":"5.DeleteExecutor","text":"<p>DeleteExecutor \u5220\u9664\u8868\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u884c\u3002\u548cUpdate\u4e00\u6837\uff0cDeletePlanNode \u5c06\u6709\u4e00\u4e2a SeqScanPlanNode \u4f5c\u4e3a\u5176\u5b50\u8282\u70b9\uff0c\u8981\u5220\u9664\u7684\u503c\u901a\u8fc7SeqScanExecutor\u63d0\u4f9b\u3002</p> <p>\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u5bf9\u7d22\u5f15\u7684\u7ef4\u62a4</li> </ul> <pre><code>//\n// Created by njz on 2023/1/29.\n//\n\n#include \"executor/executors/delete_executor.h\"\n#include \"record/type_id.h\"\n\n/**\n* TODO: Student Implement\n*/\n\nDeleteExecutor::DeleteExecutor(ExecuteContext *exec_ctx, const DeletePlanNode *plan,\n                               std::unique_ptr&lt;AbstractExecutor&gt; &amp;&amp;child_executor)\n    : AbstractExecutor(exec_ctx), plan_(plan), child_executor_(std::move(child_executor)) {}\n\nvoid DeleteExecutor::Init() {\n  catalog_mgr_=exec_ctx_-&gt;GetCatalog();\n  table_name_=plan_-&gt;GetTableName();\n  catalog_mgr_-&gt;GetTable(table_name_, table_info_);\n  table_heap_=table_info_-&gt;GetTableHeap();\n  catalog_mgr_-&gt;GetTableIndexes(table_name_, table_indexes_);\n  child_executor_-&gt;Init();\n}\n\nbool DeleteExecutor::Next([[maybe_unused]] Row *row, RowId *rid) {\n  if(child_executor_-&gt;Next(row, rid)){\n    bool is_deleted=table_heap_-&gt;MarkDelete(*rid, exec_ctx_-&gt;GetTransaction());\n    if(!is_deleted)\n      return false;\n    for(auto ind: table_indexes_){\n      Row key_row;\n      row-&gt;GetKeyFromRow(table_info_-&gt;GetSchema(), ind-&gt;GetIndexKeySchema(), key_row);\n      ind-&gt;GetIndex()-&gt;RemoveEntry(key_row, *rid, exec_ctx_-&gt;GetTransaction());\n    }\n    return true;\n  }\n  return false;\n}\n</code></pre>"},{"location":"MiniSQL/per/#6createdatabase","title":"6.CreateDatabase","text":"<p>\u7ffb\u8bd1\u8bed\u6cd5\u6811\uff0c\u518d\u8c03\u7528\u4e0b\u5c42\u7684DBStorageEngine\u8fdb\u884c\u521d\u59cb\u5316\u3002</p> <pre><code>dberr_t ExecuteEngine::ExecuteCreateDatabase(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteCreateDatabase\" &lt;&lt; std::endl;\n#endif\n    if(ast-&gt;child_ == nullptr)\n        return DB_FAILED;\n    std::string db_name(ast-&gt;child_-&gt;val_);\n    if(dbs_[db_name] != nullptr)\n    {\n        std::cout &lt;&lt; \"database \" &lt;&lt; db_name &lt;&lt; \" exists.\" &lt;&lt; endl;\n        return DB_FAILED;\n    }\n    auto* new_database = new DBStorageEngine(db_name, true);\n    dbs_[db_name] = new_database;\n    fstream out;\n    out.open(\"/mnt/d/dbs_name.txt\"); // \u53ef\u4fee\u6539\u8def\u5f84\n    out &lt;&lt; dbs_.size() &lt;&lt; std::endl;\n    for(auto db : dbs_){\n        out &lt;&lt; db.first &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; \"Create success\" &lt;&lt; std::endl;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#7dropdatabase","title":"7.DropDatabase","text":"<p>\u7ffb\u8bd1\u8bed\u6cd5\u6811\uff0c\u8c03\u7528DBStorageEngine\u7684\u6790\u6784\u51fd\u6570\u3002</p> <pre><code>dberr_t ExecuteEngine::ExecuteDropDatabase(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteDropDatabase\" &lt;&lt; std::endl;\n#endif\n    if(ast-&gt;child_ == nullptr)\n        return DB_FAILED;\n    std::string db_name(ast-&gt;child_-&gt;val_);\n    if(dbs_[db_name] == nullptr)\n    {\n        std::cout &lt;&lt; \"database \" &lt;&lt; db_name &lt;&lt; \" exists.\" &lt;&lt; endl;\n        return DB_FAILED;\n    }\n    if(current_db_ == db_name)\n        current_db_ = \"\";\n    auto target_db = dbs_[db_name];\n    target_db-&gt;~DBStorageEngine();\n    dbs_.erase(db_name);\n    fstream out;\n    out.open(\"/mnt/d/dbs_name.txt\"); // \u53ef\u4fee\u6539\u8def\u5f84\n    out &lt;&lt; dbs_.size() &lt;&lt; std::endl;\n    for(auto db : dbs_){\n        out &lt;&lt; db.first &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; \"Drop success\" &lt;&lt; std::endl;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#8showdatabases","title":"8.ShowDatabases","text":"<p>\u7ffb\u8bd1\u8bed\u6cd5\u6811\uff0c\u5c55\u793a\u6240\u6709\u7684\u6570\u636e\u5e93</p> <pre><code>dberr_t ExecuteEngine::ExecuteShowDatabases(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteShowDatabases\" &lt;&lt; std::endl;\n#endif\n    std::cout &lt;&lt; \"Database(s) of number: \" &lt;&lt; dbs_.size() &lt;&lt; endl;\n    for(const auto&amp; db : dbs_)\n    {\n        std::cout &lt;&lt; db.first &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; \"Show success\" &lt;&lt; std::endl;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#9usedatabase","title":"9.UseDatabase","text":"<p>\u540c\u4e0a</p> <pre><code>dberr_t ExecuteEngine::ExecuteUseDatabase(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteUseDatabase\" &lt;&lt; std::endl;\n#endif\n    if(ast-&gt;child_ == nullptr)\n        return DB_FAILED;\n    std::string db_name(ast-&gt;child_-&gt;val_);\n    if(dbs_[db_name] == nullptr)\n    {\n        std::cout &lt;&lt; \"no database \" &lt;&lt; db_name &lt;&lt; endl;\n        return DB_FAILED;\n    }\n    current_db_ = db_name;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#10showtables","title":"10.ShowTables","text":"<p>\u7ffb\u8bd1\u8bed\u6cd5\u6811\uff0c\u901a\u8fc7\u76ee\u5f55\u9875\u83b7\u5f97\u6240\u6709\u8868\u7684\u540d\u5b57</p> <pre><code>dberr_t ExecuteEngine::ExecuteShowTables(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteShowTables\" &lt;&lt; std::endl;\n#endif\n    DBStorageEngine* current_db_engine = dbs_[current_db_];\n    if(current_db_engine == nullptr) {\n        std::cout &lt;&lt; \"no database selected.\" &lt;&lt; endl;\n        return DB_FAILED;\n    }\n\n    std::vector&lt;TableInfo*&gt; table_infos;\n    current_db_engine-&gt;catalog_mgr_-&gt;GetTables(table_infos);\n    std::cout &lt;&lt; \"table(s) of number: \" &lt;&lt; table_infos.size() &lt;&lt; endl;\n    for(auto table_info : table_infos){\n        std::cout &lt;&lt; table_info-&gt;GetTableName() &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; \"Show table success\" &lt;&lt; std::endl;\n    return DB_SUCCESS;\n} \n</code></pre>"},{"location":"MiniSQL/per/#11createtable","title":"11.CreateTable","text":"<p>\u7ffb\u8bd1\u8bed\u6cd5\u6811\uff0c\u5229\u7528\u76ee\u5f55\u9875\u7684CreateTable\u51fd\u6570\u6765\u521b\u5efa\u8868</p> <p>\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u8981\u62ff\u5230\u8bed\u6cd5\u6811\u4e2d\u7684primary key\u548cunique\u4fe1\u606f</li> <li>\u7ed9primary key\u548cunique\u90fd\u521b\u5efa\u7d22\u5f15</li> </ul> <pre><code>dberr_t ExecuteEngine::ExecuteCreateTable(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteCreateTable\" &lt;&lt; std::endl;\n#endif\n    if(dbs_[current_db_] == nullptr){\n        std::cout &lt;&lt; \"no database selected\" &lt;&lt; std::endl;\n        return DB_FAILED;\n    }\n    pSyntaxNode ptr = ast-&gt;child_;\n    string table_name(ptr-&gt;val_);\n    ptr = ptr-&gt;next_-&gt;child_;\n    std::vector&lt;Column*&gt; columns;\n    std::vector&lt;std::string&gt; uni;\n    std::vector&lt;std::string&gt; pri;\n    string column_name;\n    string column_type;\n    TypeId type;\n    uint32_t  column_length = 4;\n    for(uint32_t i = 0;ptr != nullptr;i++,ptr = ptr-&gt;next_){\n        if(ptr-&gt;val_ == nullptr){ //\u975e unique\n            column_name = ptr-&gt;child_-&gt;val_;\n            column_type = ptr-&gt;child_-&gt;next_-&gt;val_;\n            if(column_type == \"int\"){\n                type = kTypeInt;\n            }\n            else if(column_type == \"float\"){\n                type = kTypeFloat;\n            }\n            else if(column_type == \"char\"){\n                type = kTypeChar;\n                column_length = atoi(ptr-&gt;child_-&gt;next_-&gt;child_-&gt;val_);\n                if(column_length &lt;= 0 || strchr(ptr-&gt;child_-&gt;next_-&gt;child_-&gt;val_,'.') != nullptr){\n                    std::cout &lt;&lt; \"char invalid\" &lt;&lt; std::endl;\n                    return DB_FAILED;\n                }\n            }\n            else{\n                type = kTypeInvalid;\n                cout &lt;&lt; \"Invalid type\" &lt;&lt; std::endl;\n                return DB_FAILED;\n            }\n            Column* column_ptr;\n            if(type == kTypeInt || type == kTypeFloat)\n                column_ptr = new Column(column_name,type,i, false, false);\n            else\n                column_ptr = new Column(column_name, type, column_length, i, false, false);\n            columns.push_back(column_ptr);\n        }\n        else if(!strcmp(ptr-&gt;val_,\"unique\")) {\n            column_name = ptr-&gt;child_-&gt;val_;\n            column_type = ptr-&gt;child_-&gt;next_-&gt;val_;\n            if(column_type == \"int\"){\n                type = kTypeInt;\n            }\n            else if(column_type == \"float\"){\n                type = kTypeFloat;\n            }\n            else if(column_type == \"char\"){\n                type = kTypeChar;\n                column_length = atoi(ptr-&gt;child_-&gt;next_-&gt;child_-&gt;val_);\n                if(column_length &lt;= 0 || strchr(ptr-&gt;child_-&gt;next_-&gt;child_-&gt;val_,'.') != nullptr){\n                    std::cout &lt;&lt; \"char invalid\" &lt;&lt; std::endl;\n                    return DB_FAILED;\n                }\n            }\n            else{\n                type = kTypeInvalid;\n                cout &lt;&lt; \"Invalid type\" &lt;&lt; std::endl;\n                return DB_FAILED;\n            }\n            uni.emplace_back(column_name);\n            Column* column_ptr;\n            if(type == kTypeInt || type == kTypeFloat)\n                column_ptr = new Column(column_name,type,i, false, true);\n            else\n                column_ptr = new Column(column_name, type, column_length, i, false, true);\n            columns.push_back(column_ptr);\n        }\n        else if(!strcmp(ptr-&gt;val_,\"primary keys\")){\n            for(auto pri_name = ptr-&gt;child_;pri_name != nullptr;pri_name = pri_name-&gt;next_){\n                pri.emplace_back(pri_name-&gt;val_);\n            }\n            for(auto pri_name : pri){\n                for(auto column : columns){\n                    if(column-&gt;GetName() == pri_name){\n                        if(pri.size() == 1){\n                            column-&gt;SetUnique(true);\n                        }\n                        column-&gt;SetNullable(false);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    auto* schema = new Schema(columns);\n    TableInfo* table_info = nullptr;\n    auto mgr = dbs_[current_db_]-&gt;catalog_mgr_;\n    dberr_t create = mgr-&gt;CreateTable(table_name,schema, nullptr,table_info);\n    if(create != DB_SUCCESS)\n        return create;\n    for(int i = 0;i &lt; uni.size();i++){  //unique\u9700\u8981\u521b\u5efa\u7d22\u5f15\n        std::vector&lt;string&gt; index_key;\n        index_key.emplace_back(uni.at(i));\n        auto index_name = \"UNIQUE_\" + to_string(i);\n        auto index_info = IndexInfo::Create();\n        auto res = dbs_[current_db_]-&gt;catalog_mgr_-&gt;CreateIndex\n                (table_name,index_name,index_key, nullptr,index_info,\"bptree\");\n        if(res != DB_SUCCESS)\n            return res;\n    }\n    if(pri.size() == 1){\n        string index_name = \"PRIMARY_\";\n        auto index_info = IndexInfo::Create();\n        auto res = dbs_[current_db_]-&gt;catalog_mgr_-&gt;CreateIndex\n                (table_name,index_name,pri, nullptr,index_info,\"bptree\");\n        if(res != DB_SUCCESS)\n            return res;\n    }\n    cout &lt;&lt; \"create table success\" &lt;&lt; endl;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#12droptable","title":"12.DropTable","text":"<p>\u5220\u9664\u8868\u683c</p> <pre><code>dberr_t ExecuteEngine::ExecuteDropTable(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n    LOG(INFO) &lt;&lt; \"ExecuteDropTable\" &lt;&lt; std::endl;\n  #endif\n    if(ast-&gt;child_ == nullptr)\n        return DB_FAILED;\n    string drop_table_name(ast-&gt;child_-&gt;val_);\n    return dbs_[current_db_]-&gt;catalog_mgr_-&gt;DropTable(drop_table_name);\n}\n</code></pre>"},{"location":"MiniSQL/per/#13showindexes","title":"13.ShowIndexes","text":"<p>\u5c55\u793a\u6240\u6709\u7d22\u5f15</p> <pre><code>dberr_t ExecuteEngine::ExecuteShowIndexes(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteShowIndexes\" &lt;&lt; std::endl;\n#endif\n    auto cata_manager = dbs_[current_db_]-&gt;catalog_mgr_;\n    std::vector&lt;TableInfo*&gt; table_infos;\n    auto res = cata_manager-&gt;GetTables(table_infos);\n    if(res != DB_SUCCESS){\n        return DB_FAILED;\n    }\n    for(auto &amp;table_info : table_infos){\n        string table_name = table_info-&gt;GetTableName();\n        std::vector&lt;IndexInfo*&gt; idx_list;\n        res = cata_manager-&gt;GetTableIndexes(table_name,idx_list);\n        if(res != DB_SUCCESS){\n            return res;\n        }\n        for(auto idx : idx_list){\n            std::cout &lt;&lt; idx-&gt;GetIndexName() &lt;&lt; std::endl;\n        }\n    }\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#14createindex","title":"14.CreateIndex","text":"<p>\u521b\u5efa\u7d22\u5f15\uff0c\u7528\u5230\u4e86\u76ee\u5f55\u9875\u7684CreateIndex</p> <pre><code>dberr_t ExecuteEngine::ExecuteCreateIndex(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteCreateIndex\" &lt;&lt; std::endl;\n#endif\n    string index_name = ast-&gt;child_-&gt;val_;\n    string table_name = ast-&gt;child_-&gt;next_-&gt;val_;\n    auto column_list = ast-&gt;child_-&gt;next_-&gt;next_;\n    std::vector&lt;string&gt; columns;\n    for(auto column = column_list-&gt;child_;column != nullptr;column = column-&gt;next_){\n        columns.emplace_back(column-&gt;val_);\n    }\n    auto *index_info = IndexInfo::Create();\n    auto res = context-&gt;GetCatalog()-&gt;CreateIndex(table_name,index_name,columns, nullptr,index_info,\"bptree\");\n    if(res != DB_SUCCESS)\n        return res;\n    cout &lt;&lt; \"index create success\" &lt;&lt; endl;\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#15dropindex","title":"15.DropIndex","text":"<p>\u5220\u9664\u7d22\u5f15\uff0c\u5d4c\u5957\u904d\u5386\u6bcf\u4e00\u4e2atable\u4e2d\u7684index\uff0c\u627e\u5230\u7279\u5b9a\u7684index\u540e\u5220\u9664\u3002</p> <pre><code>dberr_t ExecuteEngine::ExecuteDropIndex(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteDropIndex\" &lt;&lt; std::endl;\n#endif\n    auto idx_node = ast-&gt;child_;\n    string idx_name = idx_node-&gt;val_;\n    auto cata_manager = dbs_[current_db_]-&gt;catalog_mgr_;\n    std::vector&lt;TableInfo*&gt; table_infos;\n    auto res = cata_manager-&gt;GetTables(table_infos);\n    if(res != DB_SUCCESS){\n        return res;\n    }\n    for(auto table_info : table_infos){\n        string table_name = table_info-&gt;GetTableName();\n        std::vector&lt;IndexInfo*&gt; index_infos;\n        res = cata_manager-&gt;GetTableIndexes(table_name,index_infos);\n        if(res != DB_SUCCESS){\n            return res;\n        }\n        for(auto index_info : index_infos){\n            if(index_info-&gt;GetIndexName() == idx_name){\n                res = cata_manager-&gt;DropIndex(table_info-&gt;GetTableName(),idx_name);\n                if(res != DB_SUCCESS){\n                    return res;\n                }\n                cout &lt;&lt; \"drop index success\"&lt;&lt; endl;\n                return  DB_SUCCESS;\n            }\n        }\n    }\n    return DB_FAILED;\n}\n</code></pre>"},{"location":"MiniSQL/per/#16execfile","title":"16.ExecFile","text":"<p>\u8bfb\u5165sql\u6587\u672c\u6587\u4ef6\uff0c\u6267\u884c\u6587\u672c\u4e2d\u7ed9\u51fa\u7684\u64cd\u4f5c\u3002\u76f4\u63a5\u5bf9\u7167main\u51fd\u6570\u6765\u5199\u3002</p> <pre><code>dberr_t ExecuteEngine::ExecuteExecfile(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteExecfile\" &lt;&lt; std::endl;\n#endif\n    char* file_name = ast-&gt;child_-&gt;val_;\n    FILE* file = fopen(file_name, \"r\");\n    if (file == nullptr) {\n        cout &lt;&lt; \"File \" &lt;&lt; file_name &lt;&lt; \" not found!\" &lt;&lt; endl;\n        return DB_FAILED;\n    }\n    char input[1024];\n    while(!feof(file)) {\n        memset(input, 0, 1024);\n        int i = 0;\n        char ch;\n        while (!feof(file) &amp;&amp; (ch = getc(file)) != ';') {\n            input[i++] = ch;\n        }\n        if (feof(file)) continue;\n        input[i] = ch;\n        YY_BUFFER_STATE bp = yy_scan_string(input);\n        if (bp == nullptr) {\n            LOG(ERROR) &lt;&lt; \"Failed to create yy buffer state.\" &lt;&lt; std::endl;\n            exit(1);\n        }\n        yy_switch_to_buffer(bp);\n\n        // init parser module\n        MinisqlParserInit();\n\n        // parse\n        yyparse();\n\n        // parse result handle\n        if (MinisqlParserGetError()) {\n            // error\n            printf(\"%s\\n\", MinisqlParserGetErrorMessage());\n        }\n\n        auto result = this-&gt;Execute(MinisqlGetParserRootNode());\n\n        // clean memory after parse\n        MinisqlParserFinish();\n        yy_delete_buffer(bp);\n        yylex_destroy();\n\n        ExecuteInformation(result);\n    }\n    return DB_SUCCESS;\n}\n</code></pre>"},{"location":"MiniSQL/per/#17quit","title":"17.QUIT","text":"<p>\u8fd4\u56deDB_QUIT</p> <pre><code>dberr_t ExecuteEngine::ExecuteQuit(pSyntaxNode ast, ExecuteContext *context) {\n#ifdef ENABLE_EXECUTE_DEBUG\n  LOG(INFO) &lt;&lt; \"ExecuteQuit\" &lt;&lt; std::endl;\n#endif\n    return DB_QUIT;\n}\n</code></pre>"},{"location":"MiniSQL/per/#_4","title":"\u4e94\u3001\u6a21\u5757\u6d4b\u8bd5\u7ed3\u679c","text":""},{"location":"SE/chapter31/","title":"\u9879\u76ee\u7ba1\u7406","text":""},{"location":"SE/chapter31/#1-4p","title":"1 4\u4e2ap","text":"<ul> <li>\u7ba1\u4eba</li> <li>\u7ba1\u4ea7\u54c1\uff1aproduct\u600e\u4e48\u53bb\u6784\u9020</li> <li>\u7ba1\u6d41\u7a0b\uff1a\u8f6f\u4ef6\u5de5\u7a0b\u5206\u4e3a\u54ea\u4e9b\u6d3b\u52a8</li> <li>\u7ba1project\uff1a\u8d44\u6e90\uff0c\u534f\u8c03\uff0c\u5ba3\u4f20\u8fd9\u4e9b\u600e\u4e48\u505a</li> </ul>"},{"location":"SE/chapter31/#2","title":"2 \u5229\u76ca\u76f8\u5173\u8005","text":"<ul> <li>\u9ad8\u7ea7\u7ecf\u7406\uff1a\u90e8\u95e8\u5934\u90e8\uff0c\u4f60\u8981\u5e72\u5565\uff0c\u7ed9\u4f60\u8d44\u6e90\uff0c\u94b1\uff0c\u4eba</li> <li>\u9879\u76ee(\u6280\u672f)\u7ba1\u7406\u8005</li> <li>\u5b9e\u8df5\u8005\uff1a\u6280\u672f\u4eba\u5458(\u7cfb\u7edf\u5206\u6790\uff0c\u7cfb\u7edf\u67b6\u6784\uff0c\u7a0b\u5e8f\u5458\uff0c\u6d4b\u8bd5)</li> <li>\u5ba2\u6237\uff1a\u7ed9\u533b\u9662\u505a\u75ab\u60c5\u4e0a\u62a5\u7cfb\u7edf\uff0c\u5ba2\u6237\u662f\u533b\u9662</li> <li>\u7ec8\u7aef\u7528\u6237\uff1a\u7528\u6237\u662f\u533b\u751f</li> </ul>"},{"location":"SE/chapter31/#3","title":"3 \u9886\u5bfc","text":"<p>\u9886\u5bfc\u5f88\u91cd\u8981\uff0c\u9886\u5bfc\u9700\u8981\u6709\u80fd\u529b\uff0c\u6709\u5f71\u54cd\u529b</p> <p>MOI\u6a21\u578b\uff1a</p> <ul> <li>\u6fc0\u52b1\uff1a\u80fd\u591f\u6fc0\u52b1\u4eba\uff0c\u6fc0\u53d1\u6f5c\u8d28(\u5206\u7ea2\u80a1\u7968)</li> <li>\u7ec4\u7ec7\u80fd\u529b\uff1a\u8981\u627e\u5230\u5408\u9002\u7684\u4eba\u53bb\u5e72</li> <li>\u521b\u65b0\u80fd\u529b\uff1a\u4efb\u4f55\u56e2\u961f\u8981\u53d1\u5c55\uff0c\u4e0d\u80fd\u4e00\u6210\u4e0d\u53d8\u3002\u4e00\u4e2a\u7ec4\u7ec7\u4e0d\u521b\u65b0\u5f88\u96be\u7ef4\u6301\u3002eg.\u963f\u91cc\uff1a\u6dd8\u5b9d-&gt;\u652f\u4ed8\u5b9d</li> </ul>"},{"location":"SE/chapter31/#4","title":"4 \u7ec4\u7ec7\u65b9\u5f0f","text":"<p>\u524d\u9762\u6709</p>"},{"location":"SE/chapter31/#5","title":"5 \u654f\u6377\u56e2\u961f","text":"<ul> <li>\u76f8\u4e92\u4fe1\u4efb</li> <li>\u6280\u80fd\u4e92\u8865</li> <li>\u53bb\u6389\u523a\u5934\uff1a\u53ef\u4ee5\u53d1\u6325\u4e2a\u4eba\u82f1\u96c4\u4e3b\u4e49\uff0c\u4f46\u4e0d\u80fd\u8a00\u884c\u8fc7\u6fc0\uff0c\u5e26\u574f\u56e2\u961f</li> </ul>"},{"location":"SE/chapter31/#6","title":"6 \u6c9f\u901a\u65b9\u5f0f","text":"<ul> <li>\u6b63\u5f0f\uff0c\u548c\u4eba\u65e0\u5173\uff1a\u6587\u6863\uff0c\u8ba1\u5212\uff0c\u8d44\u6599</li> <li>\u6b63\u5f0f\uff0c\u4eba\u9645\u4e4b\u95f4\uff1a\u4fdd\u8bc1\u8d28\u91cf\uff0c\u6280\u672f\u590d\u5ba1\uff0c\u4ee3\u7801\u5ba1\u67e5</li> <li>\u975e\u6b63\u5f0f\uff0c\u4eba\u9645\u4e4b\u95f4\uff1a\u9879\u76ee\u4f1a\u8bae</li> <li>\u7535\u5b50\u5316\u901a\u8baf\uff1a\u90ae\u4ef6\u89c6\u9891\u4f1a\u8bae</li> <li>\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u7f51\u7edc\uff1a\u9080\u8bf7\u6709\u6280\u672f\u7684\uff0c\u8d44\u6df1\u7684\u4eba\u6765\u56e2\u961f\u91cc\u505a\u4ea4\u6d41</li> </ul>"},{"location":"SE/chapter31/#7","title":"7 \u4ea7\u54c1\u8303\u56f4","text":"<p>\u9700\u6c42\u5206\u6790\u5c31\u662f\u4e3a\u4e86\u628a\u4ea7\u54c1\u8303\u56f4\u63cf\u7ed8\u51fa\u6765</p> <ul> <li>\u4e0a\u4e0b\u6587\uff1a\u8fd0\u884c\u5728\u4ec0\u4e48\u6837\u7684\u786c\u4ef6\u4e0a\uff0c\u4ec0\u4e48\u7cfb\u7edf\u4e0a\u3002eg.\u533b\u9662\u4fe1\u606f\u6536\u96c6\u7cfb\u7edf\u8981\u548c\u5f71\u50cf\u7cfb\u7edf\u6709\u5173\u8054\u5173\u7cfb</li> <li>\u5b9a\u4e49\u76ee\u6807\uff1a\u8f93\u5165\u4ec0\u4e48\uff0c\u8f93\u51fa\u4ec0\u4e48</li> <li>\u529f\u80fd\u6027\u80fd\uff1a\u5e94\u8be5\u5177\u5907\u4ec0\u4e48\u529f\u80fd\uff0c\u600e\u4e48\u628ainput\u8f6c\u6362\u6210output\u3002\u6027\u80fd\u600e\u4e48\u6837\uff0c\u652f\u6491\u591a\u5c11\u7528\u6237</li> <li>\u53ef\u9760\u6027\uff1a24\u5c0f\u65f6\u4e0d\u5b95\u673a(\u652f\u4ed8\u5b9d)\uff0c\u8fd8\u662f\u4fdd\u8bc1\u4e00\u5b9a\u65f6\u95f4\u4e0d\u51fa\u95ee\u9898\u5c31\u884c(\u80a1\u7968)</li> <li>\u63a5\u53e3\uff1a\u9762\u5411\u786c\u4ef6\u63a5\u53e3\u662f\u4ec0\u4e48\uff0c\u8f6f\u4ef6\u548c\u8f6f\u4ef6\u4e4b\u95f4\u7684\u63a5\u53e3\u662f\u4ec0\u4e48</li> <li>\u5b89\u5168\uff1a\u8ba4\u8bc1\u6388\u6743\u52a0\u5bc6\u89e3\u5bc6Dos\u6709\u4ec0\u4e48\u8981\u6c42</li> </ul>"},{"location":"SE/chapter31/#8","title":"8 \u5206\u89e3\u95ee\u9898","text":"<p>\u5bf9\u6bcf\u4e2ascope\u505a\u7ec6\u5206\uff0c\u7ec6\u5206\u5230\u4e00\u7ea7\u6307\u6807\u4e8c\u7ea7\u6307\u6807\u4e09\u7ea7\u6307\u6807\uff0c\u628a\u590d\u6742\u95ee\u9898\u5206\u89e3\uff0c\u6bcf\u4e2a\u65b9\u9762\u8981\u6ee1\u8db3\u4ec0\u4e48\u9700\u6c42\u3002</p>"},{"location":"SE/chapter31/#9","title":"9 \u8fc7\u7a0b\u7ba1\u7406","text":"<p>\u9009\u62e9\u8fc7\u7a0b\uff0c\u5b9a\u4e49task\u3002\u53ef\u4ee5\u7528\u4e4b\u524d\u8bf4\u7684\u8fc7\u7a0b\u6a21\u578b\uff0c\u505a\u6d41\u7a0b\u9002\u914d\u3002</p> <ul> <li>\u8003\u8651\u9879\u76ee\u7279\u70b9</li> <li>\u786e\u5b9a\u9879\u76ee\u9700\u8981\u7684\u7cbe\u5bc6\u5ea6</li> <li>task set\uff1a\u5b9a\u4e49\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\uff0c\u9879\u76ee\uff0c\u8d28\u91cf\u4fdd\u8bc1\u70b9\uff0c\u548c\u91cc\u7a0b\u7891</li> </ul>"},{"location":"SE/chapter31/#10","title":"10 \u56fe","text":"<p>\u6a2a\u5750\u6807\uff1a 5\u4e2a\u5927\u4efb\u52a1</p> <p>\u7eb5\u5750\u6807\uff1a\u95ee\u9898\uff0c\u4ea7\u54c1\u5305\u542b\u54ea\u4e9b\u529f\u80fd</p> <p>\u4efb\u52a1\u77e9\u9635\uff0c\u6bcf\u4e2a\u5c0f\u683c\u5b50\u90fd\u662f\u4efb\u52a1\uff0c\u8fc7\u7a0b\u7ba1\u7406\u5c31\u662f\u628a\u4efb\u52a1\u7f16\u6392\u8d77\u6765</p>"},{"location":"SE/chapter31/#11","title":"11 \u9879\u76ee\u7ba1\u7406","text":"<p>\u9677\u5165\u56f0\u5883\u7684\u539f\u56e0\uff1a</p> <ul> <li>\u6ca1\u7406\u89e3\u7528\u6237\u9700\u6c42</li> <li>\u4ea7\u54c1\u5b9a\u4e49\u4e0d\u6e05\u6670</li> <li>\u66f4\u6539\u6ca1\u7ba1\u7406\u597d\uff0c\u7528\u6237\u8bf4\u8981\u66f4\u6539\uff0c\u4f46\u662f\u6ca1\u7ba1\u7406\u597d\uff0c\u5bfc\u81f4\u6df7\u4e71</li> <li>\u5546\u4e1a\u9700\u6c42\u53d8\u4e86</li> <li>DDL\u4e0d\u73b0\u5b9e\uff1a\u8001\u677f\u5ba2\u6237\uff0c5\u4e2a\u6708\u7684\u4e8b4\u4e2a\u6708\u5e72\u5b8c\uff1b\u7a0b\u5e8f\u5458\uff0c5\u4e2a\u6708\u7684\u4e8b6\u4e2a\u6708\u5e72\u5b8c</li> <li>\u7528\u6237\u4e0d\u5408\u4f5c\uff0c\u6297\u62d2</li> <li>\u6ca1\u94b1</li> <li>\u6ca1\u6709\u5408\u9002\u7684\u4eba\u624d</li> <li>\u7ba1\u7406\u8005\u7ecf\u9a8c\u4e0d\u8db3</li> </ul>"},{"location":"SE/chapter31/#12","title":"12 \u597d\u7684\u9879\u76ee\u7ba1\u7406","text":"<ul> <li>\u7406\u89e3\u7528\u6237\u9700\u6c42\uff0c\u95ee\u9898\u5b9a\u4e49\u6e05\u695a\u3002\u8fd9\u6837\u65f6\u95f4\uff0c\u4eba\u5458\uff0c\u94b1\u8981\u591a\u5c11\u5c31\u80fd\u6e05\u695a</li> <li>\u4fdd\u6301\u52a8\u529b\uff1a\u7ba1\u7406\u8005\u8981\u7528\u624b\u6bb5\u9632\u6b62\u4eba\u5458\u53d8\u52a8\u3002\u56e2\u961f\u6bcf\u4e00\u6b65\u5f3a\u8c03\u8d28\u91cf\u3002\u9ad8\u7ea7\u7ecf\u7406\u8981\u514d\u53d7\u56e2\u961f\u5f71\u54cd</li> <li>\u505atrack\uff1a\u6765\u4fdd\u8bc1\u8d28\u91cf</li> <li>\u660e\u667a\u51b3\u7b56\uff1a\u51b3\u7b56\u8981\u7b80\u5355</li> <li>\u505a\u603b\u7ed3\u5206\u6790\uff0c\u4fbf\u4e8e\u540e\u7eed\u6539\u8fdb</li> </ul>"},{"location":"SE/chapter31/#13-5w2h","title":"13 5W2H","text":"<p>\u9879\u76ee\u6700\u5173\u5fc3\u7684\u95ee\u9898\uff1a</p> <ul> <li>\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e2a\u9879\u76ee</li> <li>\u4e3a\u4e86\u5b8c\u6210\u76ee\u6807\uff0c\u8981\u505a\u4ec0\u4e48</li> <li>\u4ec0\u4e48\u65f6\u5019\u505a\u5b8c</li> <li>\u6bcf\u9879\u4efb\u52a1\u7684\u8d23\u4efb\u4eba\u662f\u8c01</li> <li>\u56e2\u961f\u5728\u54ea</li> <li>\u5982\u4f55\u505a\uff08\u6280\u672f\u548c\u7ba1\u7406\u4e24\u65b9\u9762\uff09</li> <li>\u9700\u8981\u591a\u5c11\u8d44\u6e90</li> </ul>"},{"location":"SE/chapter31/#14","title":"14 \u5173\u952e\u8fc7\u7a0b\u5b9e\u8df5","text":"<ul> <li>\u98ce\u9669\u7ba1\u7406</li> <li>\u8c03\u5ea6\u89c4\u5212</li> <li>\u9879\u76ee\u7ba1\u7406</li> <li>\u5ea6\u91cf</li> <li>\u5206\u6790</li> </ul>"},{"location":"SE/chapter6/","title":"Chapter6","text":""},{"location":"SE/chapter6/#1","title":"1","text":"<ul> <li> <p>\u8d23\u4efb\u5fc3\uff1aeg.\u8001\u677f\u544a\u8bc9\u4f6080%\uff0c\u8981\u5b8c\u6210\u5269\u4e0b\u768420%\u3002\u4e0d\u80fd\u53ea\u5b8c\u621070%\uff0c\u88ab\u50ac\u4fc3</p> </li> <li> <p>\u654f\u9510\u610f\u8bc6\uff1a\u6e05\u695a\u5ba2\u6237\u9700\u6c42</p> </li> <li> <p>\u7528\u4e8e\u627f\u8ba4\u9519\u8bef\uff1a\u5766\u8bda\u5730\u9762\u5bf9\u95ee\u9898\uff0c\u6709\u81ea\u5df1\u7684\u770b\u6cd5\uff0c\u63d0\u51fa\u5efa\u8bbe\u6027\u610f\u89c1</p> </li> <li> <p>\u6297\u538b\uff1aeg.\u963f\u91cc996</p> </li> <li> <p>\u516c\u6b63\uff1a\u4e0d\u80fd\u6545\u610f\u504f\u8892\u67d0\u4eba</p> </li> <li> <p>\u5173\u6ce8\u7ec6\u5ea6\uff1a\u7ec6\u8282\u51b3\u5b9a\u6210\u8d25\u3002eg.\u5954\u9a70\u7ec6\u8282\u505a\u5f97\u5230</p> </li> <li> <p>\u5b9e\u5728\uff1a\u6c42\u5b9e\u521b\u65b0\uff0c\u4e0d\u80fd\u597d\u9ad8\u9a9b\u8fdc</p> </li> </ul>"},{"location":"SE/chapter6/#2","title":"2 \u8f6f\u4ef6\u5de5\u7a0b\u5fc3\u7406\u5b66","text":"<ul> <li> <p>\u5546\u4e1a\u73af\u5883\uff1a\u7ec4\u7ec7\u5316\u884c\u4e3a\u8fdb\u884c\u7ba1\u7406</p> </li> <li> <p>\u4f01\u4e1a</p> </li> <li> <p>\u9879\u76ee</p> </li> <li> <p>\u56e2\u961f\uff1a\u56e2\u961f\u80fd\u52a8\u6027\uff0c\u8d85\u989d\u5b8c\u6210\u4efb\u52a1</p> </li> <li> <p>\u4e2a\u4eba\uff1a\u6bd4\u8f83\u5f3a\u7684\u8ba4\u77e5\u80fd\u529b</p> </li> </ul> <p>\u4e0d\u540cteam\u7684\u8de8\u754c\u6c9f\u901a\u89d2\u8272\uff1a</p> <p>\u5916\u8054\uff1a\u548c\u5176\u4ed6\u90e8\u95e8\u505a\u6c9f\u901a \u4fa6\u5bdf\uff1a\u5176\u4ed6\u56e2\u961f\u505a\u7684\u600e\u4e48\u6837 \u5b88\u62a4\uff1a\u4e0d\u80fd\u900f\u9732\u4fe1\u606f \u534f\u8c03\uff1a\u4ee3\u8868\u56e2\u961f\u548c\u5176\u4ed6\u56e2\u961f\u8c08\u5224</p>"},{"location":"SE/chapter6/#3","title":"3 \u6709\u6548\u7684\u8f6f\u4ef6\u56e2\u961f\u7279\u5f81","text":"<ul> <li>\u76ee\u6807\u610f\u8bc6</li> <li>\u6295\u5165\u610f\u8bc6</li> <li>\u53c2\u4e0e\u610f\u8bc6\uff1a\u4e0d\u8981\u4e8b\u4e0d\u5173\u5df1</li> <li>\u4fe1\u4efb\u610f\u8bc6\uff1a\u76f8\u4fe1\u961f\u53cb</li> <li>\u79ef\u6781\u610f\u8bc6\uff1a\u8981\u79ef\u6781\u5411\u4e0a</li> <li>\u6280\u80fd\u76f8\u4e92\u8865\u5145\uff1a\u524d\u7aef\uff0c\u4e2d\u53f0\uff0c\u540e\u53f0\uff0c\u7cfb\u7edf\u5b89\u5168...\u5404\u65b9\u9762</li> </ul> <p>\u907f\u514d\u56e2\u961f\u6bd2\u836f\uff1a</p> <ul> <li>\u76ee\u6807\u6df7\u4e71\uff1a\u4ea7\u54c1\uff0c\u7b56\u7565\uff0c\u5e02\u573a\uff0c\u6280\u672f\uff0c\u5546\u4e1a\u6a21\u5f0f\u90fd\u8981\u6e05\u695a</li> <li>\u77db\u76fe\u91cd\u91cd\uff1a\u56e0\u4e3a\u6ca1\u6709\u534f\u8c03\u5458\u3002eg.\u5de5\u8d44\u4f4e\uff0c\u4f46\u662f\u56e2\u961f\u6c1b\u56f4\u597d\uff0c\u5927\u5bb6\u613f\u610f\u5f85</li> <li>\u7ba1\u7406\u4e0d\u5584\uff1a\u6c9f\u901a\u4e0d\u660e\uff0c\u8981\u63ea\u51fa\u6ee5\u7afd\u5145\u6570\u7684\u4eba</li> <li>\u5206\u5de5\u4e0d\u660e\uff1a\u95f2\u7684\u95f2\u6b7b\uff0c\u5fd9\u7684\u5fd9\u6b7b\uff0c\u4e0d\u80fd\u6b3a\u8d1f\u8001\u5b9e\u4eba\u3002\u95f2\u7684\u4eba\u4e8b\u4e0d\u5173\u5df1\u4e0d\u884c</li> <li>\u8fde\u7eed\u5931\u8d25\uff1a\u5355\u5b50\u6ca1\u4eba\u8981\uff0c\u8981\u81ea\u5df1\u53bb\u627e\u5355\u5b50\u3002\u56e2\u5efa\u5de5\u4f5c\u5f88\u91cd\u8981\uff0c\u6253\u9e21\u8840</li> </ul>"},{"location":"SE/chapter6/#4","title":"4 \u7ec4\u7ec7\u884c\u4e3a\u5b66","text":"<p>\u76ee\u7684\uff1a\u63d0\u9ad8\u6574\u4e2a\u7ec4\u7ec7\u7684\u6548\u7387</p> <ul> <li>closed\uff1aleader\uff0c\u9879\u76ee\u7ecf\u7406\uff0c\u6a21\u5757\u7ecf\u7406\u4e00\u5c42\u5c42\u4e0b\u53bb(eg.\u4e2d\u56fd\uff0c\u6267\u884c\u529b\u5f3a)</li> <li>random\uff1a\u6bd4\u8f83\u677e\u6563(eg.\u610f\u5927\u5229\uff0c\u6709\u5229\u4e8e\u521b\u65b0\uff0c\u6548\u7387\u4e0d\u9ad8)</li> <li>Open\uff1a\u4e24\u79cd\u7ed3\u5408\uff0c\u6df7\u5408\u578b\u67b6\u6784\uff0c\u517c\u987e\u4e24\u8005\u4f18\u7f3a\u70b9(\u770b\u4eba\u6570\u51b3\u5b9a\u8303\u5f0f)</li> <li>\u540c\u6b65\uff1a\u6309\u95ee\u9898\u81ea\u7136\u5206\u89e3\u5212\u5206\u56e2\u961f\uff0c\u7136\u540e\u7ec4\u7ec7\u5728\u4e00\u8d77</li> </ul>"},{"location":"SE/chapter6/#5","title":"5 \u51b3\u5b9a\u8303\u5f0f","text":"<p>\u6309\u7167\u95ee\u9898\u7279\u5f81\u6765\u9009\u62e9\u8303\u5f0f\uff0c\u95ee\u9898\u96be\uff0crandom\u521b\u65b0\u3002</p> <p>\u89c4\u6a21\u5927\uff0cclosed\u7ba1\u7406</p> <p>\u56e2\u961f\u65f6\u95f4\uff0c\u5728\u4e00\u8d77\u76f8\u5bf9\u65f6\u95f4\u957f\uff0c\u81ea\u7531\u4e00\u70b9\u3002</p> <p>\u6a21\u5757\u5316\u7a0b\u5ea6\u8d8a\u9ad8\uff0c\u81ea\u7531\u70b9\u3002</p> <p>\u53ef\u9760\u6027\u8981\u6c42\u9ad8\uff0cclosed</p> <p>ddl\u7d27\u8feb\uff0cclosed</p> <p>\u901a\u8baf\u8981\u6c42\u9ad8\uff0cclosed</p>"},{"location":"SE/chapter6/#6","title":"6 \u654f\u6377\u56e2\u961f","text":"<ul> <li>\u4e2a\u4eba\u80fd\u529b\u548c\u56e2\u961f\u534f\u4f5c\u4e00\u6837\u91cd\u8981</li> <li>\u4eba\u6bd4\u8fc7\u7a0b\u91cd\u8981\uff0c\u7b56\u7565\u6bd4\u4eba\u91cd\u8981</li> <li>\u81ea\u7ec4\u7ec7\uff1a\u9002\u5e94\u95ee\u9898\uff0c\u4e0d\u540c\u95ee\u9898\u9009\u7528\u4e0d\u540c\u7684\u4eba</li> <li>\u8ba1\u5212\u5c3d\u91cf\u5c0f\uff0c\u4e0d\u8981\u8fc7\u5ea6\u8ba1\u5212</li> </ul>"},{"location":"SE/chapter6/#7-xp-team","title":"7 XP Team\u6781\u9650\u7f16\u7a0b\u56e2\u961f","text":"<ul> <li>\u6c9f\u901a\uff1a\u6709\u4ec0\u4e48\u4e8b\u60c5\u53ca\u65f6\u6c9f\u901a\u3002\u6bcf\u5929\u82b1\u5341\u5206\u949f\u5f00\u4f1a\uff1a1.\u6628\u5929\u5e72\u5565 2.\u6709\u5565\u95ee\u9898 3.\u4eca\u5929\u5e72\u5565</li> <li>\u7b80\u5355\u5316\uff1a\u6d3b\u5728\u5f53\u4e0b</li> <li>\u53cd\u9988\uff1a\u8001\u7248\u672c\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u518d\u8fdb\u884c\u8fed\u4ee3</li> <li>\u52c7\u6c14\uff1a\u5bf9\u81ea\u5df1\u8981\u6709\u4fe1\u5fc3\uff0c\u575a\u6301\u81ea\u5df1\u7684\u9879\u76ee</li> <li>\u5c0a\u91cd\uff1a\u56e2\u961f\u6210\u5458\u4e4b\u95f4\u76f8\u4e92\u5c0a\u91cd\uff0c\u76f8\u4e92\u8ba4\u53ef</li> </ul>"},{"location":"SE/chapter6/#8","title":"8 \u56e2\u961f\u6c9f\u901a\u624b\u6bb5","text":"<ul> <li>\u535a\u5ba2\uff1a\u56e2\u961f\u9f13\u52b1\u505a\u6280\u672f\u535a\u5ba2\uff0c\u6709\u7ecf\u9a8c\u7684\u4eba\u505a\u6280\u672f\u535a\u5ba2\uff0c\u65b9\u4fbf\u65b0\u6765\u7684</li> <li>\u5fae\u535a</li> <li>\u5728\u7ebf\u8bba\u575b</li> <li>\u793e\u4ea4\u7f51\u7edc\uff1a\u6563\u6b65\u4fe1\u606f\uff0c\u6c9f\u901a\u7684\u7fa4</li> <li>book marking\uff1a\u670b\u53cb\u5708</li> </ul>"},{"location":"SE/chapter6/#9-cloud","title":"9 Cloud","text":"<p>\u597d\u5904\uff1a</p> <ul> <li>\u5171\u4eab\u65b9\u4fbf</li> <li>\u968f\u65f6\u968f\u5730\u4ea4\u6d41</li> <li>\u6d4b\u8bd5\uff0c\u5b89\u88c5\u8fd0\u884c\u65b9\u4fbf</li> <li>\u7528\u6237\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u4f7f\u7528\u8f6f\u4ef6</li> </ul> <p>\u7f3a\u70b9\uff1a</p> <ul> <li>\u53ef\u9760\u6027\u5b89\u5168\u6027\u95ee\u9898\uff1aeg.\u963f\u91cc\u4e91\u6302\u6389\uff0c\u5f88\u591a\u7cfb\u7edf\u90fd\u4f1a\u51fa\u95ee\u9898\u3002\u5185\u90e8\u8d44\u6599\u5bb9\u6613\u88ab\u653b\u7834</li> <li>\u64cd\u4f5c\u590d\u6742</li> <li>\u7f51\u7edc\u53ef\u9760\u6027\u95ee\u9898\uff1a\u7f51\u7edc\u4e0d\u7a33\u5b9a</li> </ul>"},{"location":"SE/chapter6/#10-cde","title":"10 \u534f\u540c\u5f00\u53d1\u73af\u5883CDE","text":"<ul> <li>namespace\uff1a\u516c\u5171\u7a7a\u95f4</li> <li>\u65e5\u5386\uff1a\u6bcf\u5929\u5e72\u4e86\u5565</li> <li>\u6a21\u7248\uff1a\u6807\u51c6\u5316\uff0c\u81ea\u52a8\u521b\u5efa\u6a21\u7248</li> <li>\u91cf\u5316\u8bc4\u4f30\u6bcf\u4e2a\u6210\u5458\u7684\u8d21\u732e</li> <li>\u4ea4\u6d41\u8fc7\u7a0b\u8ddf\u8e2a</li> <li>\u5bf9\u4ea7\u51fa\u805a\u7c7b</li> </ul>"},{"location":"SE/chapter6/#11","title":"11 \u5168\u7403\u5316\u516c\u53f8","text":"<ul> <li>\u95ee\u9898\u66f4\u52a0\u590d\u6742\uff0c\u5206\u6563\u5728\u4e16\u754c\u5404\u5730</li> <li>\u51b3\u7b56\u4e0d\u786e\u5b9a\u6027\uff0c\u98ce\u9669\u66f4\u52a0\u5927</li> <li>\u5bf9\u95ee\u9898\u4e0d\u540c\u7684\u770b\u6cd5\u5bfc\u81f4\u4e0d\u540c\u7684\u65b9\u5411</li> </ul>"},{"location":"SE/chapter6/#12","title":"12 \u56fe","text":"<p>\u8ddd\u79bb\u4ea7\u751f\u969c\u788d\uff0c\u5bfc\u81f4\u6c9f\u901a\u95ee\u9898\uff0c\u534f\u8c03\u95ee\u9898</p> <p>\u56e0\u6b64\u8981\u52a0\u5f3a\u6c9f\u901a\uff0c\u4f7f\u5f97\u66f4\u597d\u534f\u540c</p>"},{"location":"SE/chapter7/","title":"Chapter7","text":""},{"location":"SE/chapter7/#1","title":"1","text":"<p>\u8f6f\u4ef6\u53d1\u5c55\u592a\u5feb\uff0c3year half life\uff0c\u73b0\u5728\u77e5\u9053\u7684\u77e5\u8bc6\u57283\u5e74\u4e4b\u5185\u6709\u4e00\u534a\u6ca1\u4ef7\u503c\u3002\u56e0\u4e3a\u8f6f\u4ef6\u53d1\u5c55\u592a\u5feb\u3002\u8fd9\u662f\u5bf9\u4e13\u4e1a\u9886\u57df\u77e5\u8bc6\u6765\u8bf4\uff0c\u4f46\u662f\u5bf9\u8f6f\u4ef6\u5de5\u7a0b\u57fa\u672c\u65b9\u6cd5\u662fforever\u7684\uff0c\u8d2f\u7a7f\u804c\u4e1a\u751f\u6daf\u3002eg.\u8f6f\u4ef6\u5de5\u7a0b\u600e\u4e48\u7ec4\u7ec7\uff0c\u600e\u4e48\u7ba1\u7406</p>"},{"location":"SE/chapter7/#2","title":"2 \u57fa\u672c\u539f\u5219","text":"<ul> <li>\u654f\u6377\u5316\uff1a\u53bb\u9664\u4e00\u5207\u5197\u4f59\u7684\u4e1c\u897f\uff0c\u82b1\u54e8\u7684\u4e1c\u897f\u6211\u4eec\u4e0d\u9700\u8981\u3002</li> <li>\u6bcf\u4e00\u6b65\u5173\u6ce8\u8d28\u91cf</li> <li>\u8981\u505a\u9002\u914d\uff1a\u4e0d\u80fd\u751f\u642c\u786c\u5957\uff0c\u6211\u4eec\u8981\u6d3b\u5b66\u6d3b\u7528\uff0c\u5bf9\u4e0d\u540c\u7684\u95ee\u9898\u505a\u9002\u5e94\u6027\u7684\u6539\u9020\uff0c\u63d0\u9ad8\u6548\u7387</li> <li>\u6709\u6548\u56e2\u961f\uff1a\u4f01\u4e1a\u6587\u5316\u505a\u597d</li> <li>\u6c9f\u901a\u534f\u8c03\u673a\u5236</li> <li>\u7ba1\u7406\u53d8\u5316\uff1a\u5efa\u7acb\u66f4\u6539\u6d41\u7a0b</li> <li>\u8bc4\u4ef7\u98ce\u9669</li> <li>\u8981\u6709\u7528\u6237\u601d\u7ef4\uff1a\u7ed9\u5176\u4ed6\u4f7f\u7528\u8005\u63d0\u4f9b\u4ef7\u503c</li> </ul>"},{"location":"blockchain/course/lesson1/principle/","title":"Principle of blockchain","text":"<p>\u7528hash\u6821\u9a8c(hash -&gt; 108 -&gt; 205 -&gt; 308...) \u4e00\u4f46\u66f4\u6539\uff0chash\u7ed3\u679c\u51fa\u9519\uff0c\u653e\u5f03\u8be5block\u4ee5\u53ca\u540e\u9762\u5168\u90e8\u7684block </p> <p>\u51fa\u9519\u7684\u5730\u65b9\u548c\u5176\u4ed6\u7684block\u7684tx\u8fdb\u884c\u6bd4\u5bf9 </p>"},{"location":"blockchain/course/lesson1/principle/#_1","title":"\u5171\u8bc6\u7b97\u6cd5","text":"<p>POW: Proof of Work \u8d5a\u53d6\u6536\u76ca\uff0c\u8c01\u6700\u5148\u7b97\u51fa\u6765hash\uff0c\u8c01\u5c31\u53ef\u4ee5\u6253\u5305block\u3002\u9a8c\u8bc1\u4ea4\u6613\u540e\u6269\u6563\u8be5\u4ea4\u6613\u5230\u5176\u4ed6\u8282\u70b9\u3002  </p>"},{"location":"blockchain/solidity/ERC-20/","title":"ERC-20","text":""},{"location":"blockchain/solidity/ERC-20/#repoyukijuda111erc20-foundry-githubcom","title":"REPO\uff1aYukiJuda111/ERC20-foundry (github.com)","text":"<p>EIP: ethereum improvement proposals</p> <p>ERC: ethereum request for comments</p> <p>ERC20: one of Tokens standards</p> <p>\u67e5\u770b\u6240\u6709EIP  ERC | Ethereum Improvement Proposals</p> <p>ERC20: \u521d\u59cb\u4ee3\u5e01\u6240\u6709\u8005\u662fconstructor\u4e2d\u7684\u8c03\u7528_mint\u7684msg.sender</p> <p>\u4e00\u5f00\u59cb\u6240\u6709\u4ee3\u5e01\u57280\u5730\u5740\uff0c\u901a\u8fc7_mint\u8c03\u7528\u5c06\u4ee3\u5e01transfer\u5230msg.sender</p> <pre><code>constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n    _mint(msg.sender, initialSupply);\n}\n</code></pre> <pre><code>function _mint(address account, uint256 value) internal {\n    if (account == address(0)) {\n        revert ERC20InvalidReceiver(address(0));\n    }\n    _update(address(0), account, value);\n}\n</code></pre>"},{"location":"blockchain/solidity/EVM/","title":"EVM overview","text":"<p>contract.sol -&gt; solc compiler -&gt; contract.bin &amp; contract.abi  EVM\u8d1f\u8d23\u7f16\u8bd1\u5408\u7ea6.sol\u6587\u4ef6\uff0c\u751f\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6.bin\u548c\u63a5\u53e3\u6587\u4ef6.abi</p> <p><pre><code>Transactions:\n    - Nonce: tx count for the account\n    - GasPrice: the price of gas\n    - GasLimit: the maximum amount of gas\n    - To: the address of the recipient\n    - Value: the amount of ether to send\n    - Data: what to send to address\n    - v, r, s: the signature of the transaction\n</code></pre> <pre><code>Contract Deployment:\n    - To: empty\n    - Data: contract init code + contract bytecode\n</code></pre> <pre><code>Function Call:\n    - To: address that the tx is sent to\n    - Data: what to send to the To address\n</code></pre></p>"},{"location":"blockchain/solidity/EVM/#data-field-of-callfunction-callencode","title":"\u901a\u8fc7data field of call\u5b9e\u73b0function call\u9700\u8981encode\uff1a","text":"<ul> <li>function selector</li> <li>parameters</li> </ul>"},{"location":"blockchain/solidity/EVM/#function-selector","title":"function selector","text":"<p>The \"function selector\" is the first 4 bytes of the keccak256 hash of the function signature. The \"function signature\" is a string that defines the function name &amp; parameters. <pre><code>// example of function signature:\n\"transfer(address,uint256)\"\n// example of function selector:\n0xa9059cbb(encode the function signature and take the first 4 bytes)\n</code></pre></p> <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract CallAnything {\n    address public s_someAddr;\n    uint256 public s_amount;\n    function transfer(address someAddr, uint256 amount) public {\n        s_someAddr = someAddr;\n        s_amount = amount;\n    }\n\n    function getSelectorOne() public  pure returns (bytes4 selector) {\n        return bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    }\n\n    function getDataToCallTransfer(address someAddr, uint256 amount) public pure returns (bytes memory) {\n        return abi.encodeWithSelector(getSelectorOne(), someAddr, amount);\n    }\n\n    function callTransferFunctionWithBinary(address someAddr, uint256 amount) public returns(bytes4,bool){\n        (bool success,bytes memory returnData) = address(this).call(getDataToCallTransfer(someAddr, amount));\n        return (bytes4(returnData), success);\n    }\n}\n</code></pre>"},{"location":"blockchain/solidity/raffle/","title":"Raffle","text":""},{"location":"blockchain/solidity/raffle/#repoyukijuda111raffle-foundry-githubcom","title":"REPO:YukiJuda111/Raffle-foundry (github.com)","text":"<p>deployed on sepolia testnet:<code>0x8A689464b4ADf9AeB584ABedC665aF525B4036F3</code></p> <p>Raffle | Address 0x8a689464b4adf9aeb584abedc665af525b4036f3 | Etherscan</p>"},{"location":"blockchain/solidity/raffle/#vrf","title":"VRF","text":"<pre><code>vrfCoordinatorInterfaceV2.requestRandomWords-&gt;chainLink nodes-&gt;(call)fufillRandomwords\n</code></pre> <p>RequestRandomWords</p> <p>The chainlink nodes listen the event edited by requestRandomWords function call</p> <pre><code>function performUpkeep(bytes calldata ) external override {\n   (bool upkeepNeeded,) = checkUpkeep(bytes(\"\"));\n   if(!upkeepNeeded){\n        revert Raffle__NotPerformUpkeep(address(this).balance, s_players.length, uint256(s_raffleState));\n   }\n    // Request the RNG\n    // https://docs.chain.link/vrf/v2/subscription/supported-networks\n    s_raffleState = RaffleState.CALCULATING;\n\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\n        i_gasLane, // gas lane\n        i_subscriptionId,\n        REQUEST_CONFIRMATIONS,\n        i_callbackGasLimit,\n        NUM_WORDS\n    );\n    emit RequestedRaffleWinner(requestId);\n}\n</code></pre> <p>fufillRandomwords(called by chainlink nodes)</p> <p>ChainlinkVRF</p> <p>override the function provided in VrfCoordinatorV2Interface</p> <pre><code>function fulfillRandomWords(\n    uint256 ,\n    uint256[] memory randomWord\n) internal override {\n    uint256 winnerIndex = randomWord[0] % s_players.length;\n    s_recentWinner = s_players[winnerIndex];\n    s_raffleState = RaffleState.OPEN;\n    s_lastTimeStamp = block.timestamp;\n    s_players = new address payable[](0);\n    emit PickedWinner(s_recentWinner);\n\n    (bool success, ) = s_recentWinner.call{value: address(this).balance}(\"\");\n    if(!success) {\n        revert Raffle__TranferFailed();\n    }\n}\n</code></pre>"},{"location":"blockchain/solidity/raffle/#automation","title":"Automation","text":"<p>Override <code>checkUpkeep</code> to set the condition.</p> <pre><code>function checkUpkeep(\n    bytes memory \n)\n    public\n    view\n    override\n    returns (bool upkeepNeeded, bytes memory /* performData */)\n{\n    bool timeSatisfied = (block.timestamp - s_lastTimeStamp) &gt; i_interval;\n    bool raffleOpen = s_raffleState == RaffleState.OPEN;\n    bool hasPlayers = s_players.length &gt; 0;\n    bool hasBalance = address(this).balance &gt; 0;\n    bool doUpkeep = timeSatisfied &amp;&amp; raffleOpen &amp;&amp; hasPlayers &amp;&amp; hasBalance;\n    return (doUpkeep, \"\");\n}\n</code></pre> <p>Override <code>performUpkeep</code> to set the performing function called by chainlink nodes.</p> <p>The front end to do upkeep : Automation | Chainlink</p>"},{"location":"blockchain/solidity/NFT/NFT/","title":"NFT","text":""},{"location":"blockchain/solidity/NFT/NFT/#repofoundry-nft","title":"repo:foundry-nft","text":"<p>\u672c\u8d28\u662fID\u5230\u62e5\u6709\u8005\u5730\u5740\u7684\u6620\u5c04<code>mapping (uint256 =&gt; address) public tokenOwner;</code></p> <p>\u7528metadata\u6765\u63cf\u8ff0NFT\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u7b49\u3002NFT\u7684metadata\u53ef\u4ee5\u5b58\u50a8\u5728\u94fe\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5b58\u50a8\u5728\u94fe\u4e0b\u3002\u5b58\u50a8\u5728\u94fe\u4e0a\u7684metadata\u53ef\u4ee5\u901a\u8fc7IPFS\u6765\u5b9e\u73b0\u3002</p> <p>URI\uff1aNFT\u7684metadata\u7684URI\uff0c\u53ef\u4ee5\u662f\u94fe\u4e0a\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u94fe\u4e0b\u7684\u3002\u94fe\u4e0a\u7684URI\u53ef\u4ee5\u901a\u8fc7IPFS\u6765\u5b9e\u73b0\u3002</p> <p>IPFS: \u5c06\u81ea\u5df1\u7684File\u901a\u8fc7hash\u7684\u5230\u4e00\u4e2a\u72ec\u7279\u7684URI\uff0c\u7136\u540e\u5c06\u8fd9\u4e2aURI\u5b58\u50a8\u5728\u81ea\u5df1\u7684IPFS\u8282\u70b9\u4e0a\u3002\u8fd9\u6837\uff0c\u5176\u4ed6\u4eba\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2aURI\u6765\u8bbf\u95ee\u81ea\u5df1\u7684File\u4e86\u3002</p>"},{"location":"blockchain/solidity/NFT/NFT/#erc-721","title":"ERC-721 \u6838\u5fc3\u51fd\u6570:","text":"<p><code>_safeMint(msg.sender, tokenId)</code>\uff1a\u7ed9msg.sender\u94f8\u9020\u4e00\u4e2atokenId\u7684NFT\u3002 <code>tokenURI(tokenId)</code>\uff1a\u8fd4\u56detokenId\u7684metadata\u7684URI\u3002 <code>_baseURI()</code>\uff1a\u8fd4\u56demetadata\u7684baseURI, \u7528\u4e8e\u62fc\u63a5tokenURI(tokenId)\u3002</p>"},{"location":"blockchain/solidity/NFT/NFT/#sepoliadoggie-nft","title":"\u5728sepolia\u4e0a\u90e8\u7f72\u7684Doggie NFT","text":""},{"location":"blockchain/solidity/NFT/NFT/#local-hostmood-nft","title":"\u5728Local host\u4e0a\u90e8\u7f72\u7684Mood NFT","text":""},{"location":"blockchain/solidity/StableCoin/StableCoin/","title":"\u7c7b\u4f3c\u4e8eDAI\u7684stable coin\u6784\u5efa","text":"<p>\u8bb0\u5f55\u4e86\u6211\u6784\u5efa\u7c7b\u4f3c\u4e8eDAI\u7684stable coin\u7684\u5168\u6d41\u7a0b\u3002</p> <p>REPO : Github REPO</p>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#1","title":"1 \u7a33\u5b9a\u5e01\u6982\u8ff0","text":"<p>\u9879\u76ee\u4e2d\u7684\u7a33\u5b9a\u5e01\u662f\u53c2\u8003\u4e86DAI\uff0c\u5b9e\u73b0\u4e861:1\u4e0e\u7f8e\u5143\u6302\u94a9\u7684\u7a33\u5b9a\u5e01\u3002\u7528\u4e86liquidate\u7684\u7b97\u6cd5\u6765\u4fdd\u8bc11:1\u7684\u7a33\u5b9a\u6027\u3002\u5176\u4e2dliquidate\u7b97\u6cd5\u4e5f\u662f\u8be5\u9879\u76ee\u4e2d\u7684\u91cd\u70b9\uff0c\u5373\u5f53\u7528\u6237\u7684\u8d28\u62bc\u7269\u4e0d\u8db3\u4ee5\u7ef4\u6301\u5176\u53d6\u51fa\u7684stable coin\u7684\u6570\u91cf\u65f6(\u4f4e\u4e8ehealth factor)\uff0c\u5219\u5176\u4ed6\u7528\u6237\u53ef\u4ee5\u5bf9\u8be5\u7528\u6237\u8fdb\u884c\u6e05\u7b97\uff0c\u5373\u901a\u8fc7\u8f83\u4fbf\u5b9c\u7684\u4ef7\u683c\u8d2d\u4e70\u4f4e\u4e8ehealth factor\u7528\u6237\u7684\u8d28\u62bc\u7269\uff0c\u4ee5\u6b64\u6765\u7ef4\u6301\u6574\u4e2aDeFi\u59cb\u7ec8\u4fdd\u6301over-collateralized(\u8d28\u62bc\u7269\u7684\u4ef7\u503c &gt; \u5df2\u7ecf\u94f8\u9020\u7684\u7a33\u5b9a\u5e01\u7684\u4ef7\u503c)\u3002\u901a\u8fc7\u7ef4\u6301\u6574\u4e2aDeFi\u7684over-collateralized\u7684\u6027\u8d28\uff0c\u6765\u7ef4\u63011:1\u7684\u7a33\u5b9a\u6027\u3002liquidate\u51fd\u6570\u4f1a\u5728\u540e\u7eed\u5c55\u5f00\u4ecb\u7ecd\u3002</p>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#2-erc20","title":"2 \u6784\u5efaERC20","text":"<p>\u4ee3\u7801\uff1aDSC</p> <p>\u7528\u4e86openzepplin\u5e93\u6765\u5feb\u901f\u6784\u5efaERC20\uff0c\u7a33\u5b9a\u5e01\u4e3b\u8981\u529f\u80fd\u662f\u63d0\u4f9b<code>mint</code>\u548c<code>burn</code>\u63a5\u53e3\uff0c\u4f9b<code>DscEngine</code>\u4f7f\u7528\u3002\u540e\u7eed\u79f0\u8be5ERC20 token\u4e3aDSC\u3002</p> <ul> <li><code>mint</code>: \u5728\u903b\u8f91\u4e0a\u8d1f\u8d23\u94f8\u9020token\uff0c<code>_mint</code>\u8c03\u7528\u8d1f\u8d23\u5c06token\u4ece<code>0x0</code>\u53d1\u9001\u5230\u6307\u5b9a\u5730\u5740(user)</li> </ul> <pre><code>function mint(address _to, uint256 _amount) external onlyOwner returns (bool) {\n    if (_to == address(0)) {\n        revert DecentralizedStableCoin__NotZeroAddress();\n    }\n    if (_amount &lt;= 0) {\n        revert DecentralizedStableCoin__MustBeMoreThanZero();\n    }\n    _mint(_to, _amount);\n    return true;\n}\n</code></pre> <ul> <li><code>burn</code>: \u5728\u903b\u8f91\u4e0a\u8d1f\u8d23\u9500\u6bc1token\uff0c<code>_burn</code>\u8c03\u7528\u672c\u8d28\u4e0a\u8bb2<code>msg.sender</code>\u7684token\u8fd8\u7ed9<code>0x0</code></li> </ul> <pre><code>function mint(address _to, uint256 _amount) external onlyOwner returns (bool) {\n    if (_to == address(0)) {\n        revert DecentralizedStableCoin__NotZeroAddress();\n    }\n    if (_amount &lt;= 0) {\n        revert DecentralizedStableCoin__MustBeMoreThanZero();\n    }\n    _mint(_to, _amount);\n    return true;\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#3-dscenginedefi","title":"3 \u6784\u5efaDscEngine(Defi)","text":"<p>\u4ee3\u7801\uff1aDscEngine</p> <p>\u4e3a\u4e86\u5b9e\u73b0DscEngine\uff0c\u8981\u5b9e\u73b0\u4ee5\u4e0b\u6838\u5fc3\u529f\u80fd:</p> <ul> <li>\u8d28\u62bctoken\uff0c\u5e76\u6839\u636e\u8d28\u62bc\u7269\u7684\u4ef7\u503c\u94f8\u9020DSC</li> <li>\u53d6\u56de\u8d28\u62bc\u7684token\uff0c\u5e76\u9500\u6bc1\u76f8\u5e94\u7684DSC</li> <li>\u6e05\u7b97liquidate\uff0c\u4ee5\u6b64\u6765\u7ef4\u6301\u6574\u4e2aDefi\u7684\u6b63\u5e38\u8fd0\u4f5c</li> </ul>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#31","title":"3.1 \u6784\u9020\u51fd\u6570","text":"<p>\u9700\u8981\u4f20\u5165:</p> <ul> <li>\u4f5c\u4e3a\u8d28\u62bc\u7269\u7684token\u5730\u5740(weth\u548cwbtc\u7684\u5730\u5740)</li> <li>\u5582\u4ef7\u5730\u5740: \u7528\u4e8e\u6362\u7b97\u8d28\u62bc\u7269token\u548c\u7f8e\u5143\u7684\u6c47\u7387</li> <li>dsc\u5730\u5740(\u521a\u521a\u6784\u5efa\u7684ERC20\u7684\u5730\u5740)</li> </ul> <pre><code>constructor(address[] memory tokenAddresses, address[] memory priceFeedAddresses, address dscAddress) {\n    if (tokenAddresses.length != priceFeedAddresses.length) {\n        revert DSCEngine__TokenAddressAndPriceFeedAddressMustBeEqualLength();\n    }\n    for (uint256 i = 0; i &lt; tokenAddresses.length; i++) {\n        s_priceFeeds[tokenAddresses[i]] = priceFeedAddresses[i];\n        s_collateralTokens.push(tokenAddresses[i]);\n    }\n    i_dsc = DecentralizedStableCoin(dscAddress);\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#32-healthfactor","title":"3.2 HealthFactor","text":"<p>\u68c0\u6d4b\u7528\u6237\u7684health factor\u662f\u6574\u4e2a\u7a33\u5b9a\u5e01DeFi\u80fd\u8fd0\u4f5c\u7684\u6838\u5fc3\u3002\u5f53\u7528\u6237\u7684\u7684health factor\u4f4e\u4e8e\u4e00\u5b9a\u9608\u503c\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u8ba9\u5176\u4ed6\u7528\u6237\u5bf9\u5176\u8fdb\u884cliquidate\u3002</p> <p>health factor\u5177\u4f53\u800c\u8a00\u5c31\u662f\u7528\u6237\u94f8\u9020\u7684DSC\u548c\u8d28\u62bc\u8fdb\u53bb\u7684token\u7684\u6bd4\u503c\uff0c\u5728\u8fd9\u4e2a\u5408\u7ea6\u4e2d\u8bbe\u5b9a\u4e3a1:2\u6765\u6ee1\u8db3\u6574\u4e2aDefi\u59cb\u7ec8\u4fdd\u6301over-collateralized\uff0c\u4f8b\u5982\u8d28\u62bc$200\u4ef7\u503c\u7684token\u5219\u6700\u591a\u53ef\u4ee5\u5728defi\u4e2d\u94f8\u9020$100\u4ef7\u503c\u7684DSC\u3002\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>function _healthFactor(address user) private view returns (uint256) {\n    // total DSC minted\n    // total collateral deposited\n    (uint256 totalDscMinted, uint256 totalCollateralInUsd) = _getAccountInformation(user);\n    if (totalDscMinted == 0) return type(uint256).max; // wtf\n    uint256 collateralAdjustedForThreshold = totalCollateralInUsd * LIQUIDATION_THRESHOLD / LIQUIDATION_PRECISION;\n    // 200% over-collateralized\n    return (collateralAdjustedForThreshold * PRECISON) / totalDscMinted;\n}\n</code></pre> <p>\u4e3a\u4e86\u8ba1\u7b97\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684<code>totalCollateralInUsd</code>\uff0c\u9700\u8981\u4f7f\u7528chainlink\u7684\u9884\u8a00\u673a:Chainlink Oracle</p> <pre><code>function getUsdValue(address token, uint256 amount) public view returns(uint256) {\n    AggregatorV3Interface priceFeed = AggregatorV3Interface(s_priceFeeds[token]);\n    ( , int price, , , ) = priceFeed.stablePriceCheck();\n    // \u4ecechainlink\u8fd4\u56de\u7684\u4ef7\u683c\u662f8\u4f4d\u5c0f\u6570\n    return uint256(price) * ADDITIONAL_FEED_PRECISION * amount / PRECISON;\n}\n</code></pre> <p>\u8fd8\u8981\u6ce8\u610f<code>if (totalDscMinted == 0) return type(uint256).max;</code>\u3002\u5373\u7528\u6237\u53ea\u9009\u62e9\u5b58\u5165\u8d28\u62bc\u7269\u4e0d\u53bb\u94f8\u9020DSC\u8fd9\u5f53\u7136\u4e5f\u662f\u53ef\u884c\u7684\uff0c\u8981\u7279\u6b8a\u5224\u65ad\u3002\u8fd9\u662f\u901a\u8fc7\u540e\u7eedfuzz test\u627e\u5230\u7684bug\uff0c\u4f1a\u5728\u540e\u9762\u518d\u6b21\u63d0\u5230\u3002</p>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#32-msgsenderdsc","title":"3.2 \u5b58\u5165\u8d28\u62bc\u7269\u5e76\u7ed9msg.sender\u94f8\u9020DSC","text":""},{"location":"blockchain/solidity/StableCoin/StableCoin/#321","title":"3.2.1 \u5b58\u5165\u8d28\u62bc\u7269","text":"<p>\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u8d58\u8ff0\u3002\u6709\u4e00\u884c<code>_revertIfHealthFactorIsBroken(msg.sender);</code>\u5373\u68c0\u6d4b\u7528\u6237\u7684health factor\uff0c\u6309\u7406\u6765\u8bf4\u5b58\u5165\u8d28\u62bc\u7269\u53ea\u4f1a\u8ba9\u7528\u6237\u7684health factor\u66f4\u5065\u5eb7\uff0c\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u5220\u4e86\u4f1a\u66f4\u7701gas fee\u3002\u4f46\u51fa\u4e8e\u5b89\u5168\u6027\u8003\u8651\u8fd8\u662f\u6dfb\u52a0\u3002</p> <pre><code>/**\n * @param tokenCollateral \u4f5c\u4e3a\u62b5\u62bc\u7269\u7684token\u7684\u5730\u5740\n * @param amoutCollateral \u62b5\u62bc\u7269\u7684\u6570\u91cf\n */\nfunction depositCollateral(address tokenCollateral, uint256 amoutCollateral)\n    public\n    moreThanZero(amoutCollateral)\n    isAllowedToken(tokenCollateral)\n    nonReentrant // \u4e0d\u53ef\u91cd\u5165(more gas fee, safer)\n{\n    s_collateralDeposited[msg.sender][tokenCollateral] += amoutCollateral;\n    emit CollateralDeposited(msg.sender, tokenCollateral, amoutCollateral);\n    bool success = IERC20(tokenCollateral).transferFrom(msg.sender, address(this), amoutCollateral);\n    if(!success) {\n        revert DSCEngine__TransferFailed();\n    }\n    _revertIfHealthFactorIsBroken(msg.sender);\n    // console.log(\"now balance: \", IERC20(tokenCollateral).balanceOf(address(this)));\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#322-mint-dsc","title":"3.2.2 mint DSC","text":"<p>\u4e5f\u662f\u6ce8\u610f\u68c0\u67e5health factor\u5373\u53ef\u3002</p> <pre><code>/**\n * @param amountDscToMint \u94f8\u9020\u7684DSC\u6570\u91cf\n * @notice collateralization value &gt; minted DSC value\n */\nfunction mintDsc(uint256 amountDscToMint)\n    public \n    moreThanZero(amountDscToMint)\n    nonReentrant\n{\n    s_dscMinted[msg.sender] += amountDscToMint;\n    // if minted too much, revert(e.g. $150 DSC, $100 collateral)\n    _revertIfHealthFactorIsBroken(msg.sender);\n    bool minted = i_dsc.mint(msg.sender, amountDscToMint);\n    if(!minted){\n        revert DSCEngine__MintFailed();\n    }\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#323","title":"3.2.3 \u6574\u5408\u903b\u8f91","text":"<pre><code>/**\n * @param tokenCollateralAddress \u8981\u5b58\u7684token\u7684\u5730\u5740\n * @param amountCollateral \u8981\u5b58\u7684token\u6570\u91cf\n * @param amountDscToMint \u94f8\u9020DSC\u7684\u6570\u91cf\n */\nfunction depositCollateralAndMintDsc\n(\n    address tokenCollateralAddress,\n    uint256 amountCollateral,\n    uint256 amountDscToMint\n) external {\n    depositCollateral(tokenCollateralAddress, amountCollateral);\n    mintDsc(amountDscToMint);\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#33-dsc","title":"3.3 \u53d6\u56de\u8d28\u62bc\u7269\u5e76\u9500\u6bc1DSC","text":""},{"location":"blockchain/solidity/StableCoin/StableCoin/#331","title":"3.3.1 \u53d6\u56de\u8d28\u62bc\u7269","text":"<p>\u8fd9\u91cc\u540c\u6837\u9700\u8981\u5173\u6ce8health factor\u3002</p> <pre><code>//\u53d6\u56de\u8d28\u62bc\u7269\uff0c\u9700\u8981health factor &gt; 1\nfunction redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral)\n    public \n    moreThanZero(amountCollateral)\n    isAllowedToken(tokenCollateralAddress)\n    nonReentrant\n{\n    _redeemCollateral(tokenCollateralAddress, amountCollateral, msg.sender, msg.sender);\n    _revertIfHealthFactorIsBroken(msg.sender);\n}\n</code></pre> <pre><code>function _redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral,\naddress from, address to) private {\n    s_collateralDeposited[from][tokenCollateralAddress] -= amountCollateral;\n    emit CollateralRedeemed(from, to, amountCollateral, tokenCollateralAddress);\n    bool success = IERC20(tokenCollateralAddress).transfer(to, amountCollateral);\n    if(!success) {\n        revert DSCEngine__TransferFailed();\n    }\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#332-dsc","title":"3.3.2 \u9500\u6bc1DSC","text":"<p>\u8003\u8651\u5230\u9500\u6bc1DSC\u53ea\u4f1a\u8ba9health factor\u66f4\u5065\u5eb7\uff0c\u56e0\u6b64check health factor\u8fd9\u4e00\u6b65\u4e5f\u53ef\u80fd\u662f\u975e\u5fc5\u8981\u7684\u3002\u51fa\u4e8e\u5b89\u5168\u8003\u8651\u8fd8\u662f\u52a0\u4e0a\u3002</p> <pre><code>function burnDsc(uint256 amountDscToBurn)\n    public \n    moreThanZero(amountDscToBurn)\n{\n    _burnDsc(amountDscToBurn, msg.sender, msg.sender);\n    _revertIfHealthFactorIsBroken(msg.sender); // I dont think this is necessary\n}\n</code></pre> <pre><code>function _burnDsc(uint256 amountDscToBurn, address onBehalfOf, address dscFrom) private {\n    s_dscMinted[onBehalfOf] -= amountDscToBurn;\n    bool success = i_dsc.transferFrom(dscFrom, address(this), amountDscToBurn);\n    if(!success) {\n        revert DSCEngine__TransferFailed();\n    }\n    i_dsc.burn(amountDscToBurn); // only owner can burn\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#333","title":"3.3.3 \u6574\u5408\u903b\u8f91","text":"<pre><code>/**\n * @param tokenCollateralAddress \u8d28\u62bc\u7269\u7684\u5730\u5740\n * @param amountCollateral \u8d28\u62bc\u7269\u7684\u6570\u91cf\n * @param amountDscToBurn \u9500\u6bc1\u7684DSC\u6570\u91cf\n */\nfunction redeemCollateralForDsc(\n    address tokenCollateralAddress,\n    uint256 amountCollateral, uint256 amountDscToBurn\n) external {\n    burnDsc(amountDscToBurn);\n    redeemCollateral(tokenCollateralAddress, amountCollateral);\n}\n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#34","title":"3.4 \u6e05\u7b97","text":"<p>\u5148\u770b\u6574\u4e2a\u4ee3\u7801\uff0c\u5927\u81f4\u903b\u8f91\u5c31\u662funder-collateralized\u7684\u7528\u6237\u4f1a\u88ab\u5176\u4ed6\u7528\u6237\u6e05\u7b97\uff0c\u5176\u4ed6\u7528\u6237\u901a\u8fc7\u81ea\u5df1\u652f\u4ed8\u4e00\u5b9a\u6570\u989d\u7684DSC\u6765\u9500\u6bc1\u88ab\u6e05\u7b97\u7528\u6237\u7684DSC\uff0c\u5e76\u83b7\u5f97\u88ab\u6e05\u7b97\u7528\u6237\u7684\u8d28\u62bc\u7269(\u4f1a\u670910%\u7684bonus\u6765\u9a71\u52a8\u4ed6\u4eec\u6e05\u7b97)\u3002</p> <p>\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4fdd\u6301\u6574\u4e2aDefi\u662fover-collateralized\u7684(\u5408\u7ea6\u4e2d\u5b58\u50a8\u7684\u8d28\u62bc\u7269\u7684\u4ef7\u503c &gt; minted DSC\u7684\u4ef7\u503c)\u3002\u6bd4\u5982\u88ab\u6e05\u7b97\u7528\u6237\u8d28\u62bc\u4e86$200\u7684eth\u6765\u83b7\u5f97$100\u7684DSC\uff0c\u4f46\u662f\u8fc7\u6bb5\u65f6\u95f4\u4ed6\u8d28\u62bc\u7684eth\u8d2c\u503c\u5230\u4e86$180\uff0c\u8fd9\u65f6\u6839\u636ehealth factor\u7684\u8ba1\u7b97\uff0c\u4ed6\u5df2\u7ecfunder-collateralized\u4e86\uff0c\u5176\u4ed6\u7528\u6237\u53ef\u4ee5\u6e05\u7b97\u3002\u53ef\u4ee5\u770b\u5230\u6574\u4e2a\u7cfb\u7edf\u76ee\u524d\u6709$10\u7684under-collateralized\u9700\u8981\u6062\u590d\uff0c\u90a3\u4e48\u5176\u4ed6\u7528\u6237\u652f\u4ed8\u4e86$10\u7684DSC,\u5c31\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u4ef7\u503c$10*1.1\u7684eth\uff0c\u5e76\u9500\u6bc1\u4e86\u88ab\u6e05\u7b97\u7528\u6237$10\u7684DSC\uff0c\u6b64\u65f6\u88ab\u6e05\u7b97\u7528\u6237\u53c8\u56de\u5230\u4e86\u5065\u5eb7\u72b6\u6001(\u8d28\u62bc$180\u7684eth\uff0c\u8fd8\u6709$90\u7684DSC\u672a\u88ab\u9500\u6bc1)\u3002</p> <pre><code>// \u68c0\u6d4b\u67d0\u4eba\u662f\u5426under-collateralized\uff0c\u5982\u679c\u662f\uff0c\u5c31\u4ee5\u6253\u6298\u7684\u5f62\u5f0fliquidate\n/**\n * \n * @param collateral erc20 token address\n * @param user under-collateralized user(health factor &lt; 1)\n * @param debtToCover The amount of DSC you want to burn to improve the user's health factor\n * @notice \u5fc5\u5907\u6761\u4ef6: over-collateralized(\u5408\u7ea6\u4e2d\u5b58\u50a8\u7684\u8d28\u62bc\u7269\u7684\u4ef7\u503c &gt; minted DSC\u7684\u4ef7\u503c)\n */\nfunction liquidate(address collateral, address user, uint256 debtToCover) \n    external \n    moreThanZero(debtToCover)\n    isAllowedToken(collateral)\n    nonReentrant\n{\n    uint256 startingUserHealthFactor = _healthFactor(user);\n    if(startingUserHealthFactor &gt;= MIN_HEALTH_FACTOR) {\n        revert DSCEngine__HealthFactorFine();\n    }\n\n    // \u62ff\u8d70\u8d28\u62bc\u7269\n    uint256 tokenAmountFromDebtCovered = getTokenAmountFromUsd(collateral, debtToCover);\n    // \u7ed9liquidator 10% bonus\n    uint256 bonusCollateral = (tokenAmountFromDebtCovered * LIQUIDATION_BONUS) / LIQUIDATION_PRECISION;\n    uint256 totalCollateralToRedeem = tokenAmountFromDebtCovered + bonusCollateral;\n    _redeemCollateral(collateral, totalCollateralToRedeem, user, msg.sender);\n\n    // \u9500\u6bc1DSC,msg.sender\u652f\u4ed8,user\u7684DSC\u88ab\u9500\u6bc1\n    _burnDsc(debtToCover, user, msg.sender);\n\n    uint256 endingUserHealthFactor = _healthFactor(user);\n    if(endingUserHealthFactor &lt;= startingUserHealthFactor) {\n        revert DSCEngine__HealthFactorNotImproved();\n    }\n    _revertIfHealthFactorIsBroken(msg.sender);\n}\n</code></pre> <p>\u8fd9\u91cc\u5176\u5b9e\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u6a21\u578b\uff0c\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u6a21\u578b\u80fd\u591f\u59cb\u7ec8\u4fdd\u6301over-collateralized\uff0c\u4f5c\u4e3a\u4e00\u4e2aDefi\u9700\u8981\u901a\u8fc7\u5b89\u5168\u5ba1\u8ba1\u3002\u8fd9\u91cc\u7b80\u5355\u505a\u4e86Invariant\u6d4b\u8bd5\uff0c\u4fdd\u8bc1\u6a21\u578b\u59cb\u7ec8\u6709\u5408\u7ea6\u4e2d\u5b58\u50a8\u7684\u8d28\u62bc\u7269\u7684\u4ef7\u503c &gt; minted DSC\u7684\u4ef7\u503c\u3002</p>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#4-invariant-test","title":"4 Invariant Test","text":"<p>\u5728\u8fdb\u884cInvariant Test\u4e4b\u524d\u8981\u5148\u8fdb\u884cunit test\u548cintegration test\uff0c\u8fd9\u9879\u76ee\u53ea\u5199\u4e86\u90e8\u5206unit test\uff0c\u5728github repo\u4e2d\u6709\u76f8\u5173\u4ee3\u7801unit test</p> <p>Invariant Test\u4ee3\u7801\u4e5f\u5728repo\u4e2dinvariant test</p> <p>\u5728Invariant Test\u4e2d\uff0c\u4e3b\u8981\u8003\u8651\u4e86\u6a21\u578b\u4fdd\u6301over-collateralized\uff0c\u5373\u6211\u4eec\u9700\u8981\u5224\u65ad\u5408\u7ea6\u4e2d\u5b58\u50a8\u7684\u8d28\u62bc\u7269\u7684\u4ef7\u503c &gt; minted DSC\u7684\u4ef7\u503c\uff0c<code>assert (wethValue + wbtcValue &gt;= totalSupply);</code>\u3002</p> <p>Foundry\u6846\u67b6\u4e2d\u7684<code>StdInvariant</code>\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u8fdb\u884cInvariant Test:</p> <p>1.\u5148\u51b3\u5b9a\u9700\u8981\u9891\u7e41\u8c03\u7528\u7684<code>DscEngine</code>\u7684\u51fd\u6570\uff1a<code>depositCollateral</code>, <code>mintDsc</code>, <code>redeemCollateral</code></p> <p>2.\u8bbe\u8ba1\u7b56\u7565\u8ba9\u4e0a\u9762\u4e09\u4e2a\u51fd\u6570\u8c03\u7528\u7684token\u5730\u5740\u4ece<code>weth</code>\u548c<code>wbtc</code>\u5730\u5740\u4e2d\u9009\u62e9</p> <pre><code>function _getCollateralFromSeed(uint256 collateralSeed) private view returns(ERC20Mock) {\n    if(collateralSeed % 2 == 0){\n        return weth;\n    } else {\n        return wbtc;\n    }\n}\n</code></pre> <p>3.\u8bb0\u5f55\u6bcf\u6b21\u8c03\u7528depositCollateral\u65f6\u7531Invariant Test \u4ea7\u751f\u7684<code>msg.sender</code>\u7684\u5730\u5740\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4fdd\u8bc1\u968f\u673a\u4ea7\u751f\u7684mintDsc\u7684sender\u5df2\u7ecf\u8d28\u62bc\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684weth/wbtc</p> <pre><code>function depositCollateral(uint256 collateralSeed, uint256 amountCollateral) public {\n     ...\n    // \u53ef\u80fd\u6709\u7528\u6237\u91cd\u590dpush\n    usersWithCollateralDeposited.push(msg.sender);\n}\n</code></pre> <pre><code>function mintDsc(uint256 amount, uint256 addressSeed) public {\n    if(usersWithCollateralDeposited.length == 0){\n        return;\n    }\n    address sender = usersWithCollateralDeposited[addressSeed % usersWithCollateralDeposited.length];\n     ...\n}\n</code></pre> <p>4.Do Invariant Test !!!</p> <pre><code>function invariant_protocolMustHaveMoreValueThanTotalSupply() public view {\n    uint256 totalSupply = dsc.totalSupply();\n    uint256 totalWethDeposited = IERC20(weth).balanceOf(address(dscEngine));\n    uint256 totlWbtcDeposited = IERC20(wbtc).balanceOf(address(dscEngine)); // fix bug\n    // console.log(\"Deposited weth: \", totalWethDeposited);\n    // console.log(\"Deposited wbtc: \", totlWbtcDeposited);\n    uint256 wethValue = dscEngine.getUsdValue(weth, totalWethDeposited);\n    uint256 wbtcValue = dscEngine.getUsdValue(wbtc, totlWbtcDeposited);\n\n    console.log(\"Total Supply: \", totalSupply);\n    console.log(\"Total Weth Deposited: \", totalWethDeposited);\n    console.log(\"Total Wbtc Deposited: \", totlWbtcDeposited);\n    assert (wethValue + wbtcValue &gt;= totalSupply);\n}\n</code></pre> <p>\u540c\u65f6\u6211\u5728\u8fd9\u91cc\u4e5f\u8003\u8651\u4e86pricefeed\u4ef7\u683c\u6ce2\u52a8\u7ed9\u6a21\u578b\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u76f4\u89c2\u4e0a\u6765\u8bf4\uff0c\u5982\u679ceth\u7684\u4ef7\u683c\u8dcc\u5e45\u8fc7\u5927\uff0chealth factor\u81ea\u7136\u662f\u6ee1\u8db3\u4e0d\u4e86\u7684\uff0c\u8fd9\u4e5f\u662f\u8fd9\u4e2aDefi\u660e\u786e\u5b58\u5728\u7684\u98ce\u9669\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u8fc7\u4e0d\u4e86Invariant Test\u7684\u3002\u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u53ea\u6709\u5728 110% \u4ee5\u4e0a over-collateralized\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u56e0\u4e3a\u53ea\u8981\u5728110%\u4ee5\u4e0a\u7684over-collateralized\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6fc0\u52b1\u5176\u4ed6\u7528\u6237\u53bbliquidate\u54ea\u4e9bunder health\u7684\u7528\u6237\u3002</p> <pre><code>// Known bug: \u5982\u679c\u4ef7\u683c\u6ce2\u52a8\u592a\u5927\uff0c\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5(\u8981\u6c42:110% \u4ee5\u4e0a over-collateralization)\n// function updateCollateralPrice(uint96 newPrice) public {\n//     int256 newPriceInt = int256(uint256(newPrice));\n//     ethUsdPriceFeed.updateAnswer(newPriceInt);\n// } \n</code></pre>"},{"location":"blockchain/solidity/StableCoin/StableCoin/#5-oracle-protection","title":"5 Oracle Protection","text":"<p>\u7528\u4e86chainlink\u7684\u9884\u8a00\u673a\uff0c\u8fd9\u5176\u5b9e\u4e0d\u662f\u5b8c\u6210\u53bb\u4e2d\u5fc3\u5316\uff0c\u5982\u679cchainlink\u7684\u9884\u8a00\u673a\u5931\u6548\u4e86\uff0c\u8fd9\u4e2aDefi\u4e5f\u4f1a\u5931\u6548\u3002\u6211\u4eec\u9700\u8981\u5728\u5582\u4ef7\u4e00\u5b9a\u65f6\u95f4\u4e0d\u66f4\u65b0\u65f6\u629b\u51fa\u5f02\u5e38\u3002</p> <pre><code>library OracleLib {\n    error OracleLib__StablePrice();\n    uint256 private constant TIMEOUT = 1 hours;\n    function stablePriceCheck(AggregatorV3Interface priceFeed) \n        public \n        view \n        returns (uint80, int256,uint256, uint256, uint80) \n    {\n        (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = priceFeed.latestRoundData();\n        uint256 secondsSinceLastUpdate = block.timestamp - updatedAt;\n        if(secondsSinceLastUpdate &gt; TIMEOUT){\n            // \u5982\u679c\u8d85\u8fc71\u5c0f\u65f6\u6ca1\u6709\u66f4\u65b0\uff0c\u51bb\u7ed3DscEngine\n            revert OracleLib__StablePrice();\n        }\n        return (roundId, price, startedAt, updatedAt, answeredInRound);\n    }\n}\n</code></pre>"},{"location":"golang/garbage/","title":"\u5783\u573e\u56de\u6536","text":"<p><pre><code>var global *int\n\nfunc f() {\n    var x int\n    x = 1\n    global = &amp;x\n}\n\nfunc g() {\n    y := new(int)\n    *y = 1\n}\n</code></pre> f\u51fd\u6570\u91cc\u7684x\u53d8\u91cf\u5fc5\u987b\u5728\u5806\u4e0a\u5206\u914d\uff0c\u56e0\u4e3a\u5b83\u5728\u51fd\u6570\u9000\u51fa\u540e\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7\u5305\u4e00\u7ea7\u7684global\u53d8\u91cf\u627e\u5230\uff0c\u867d\u7136\u5b83\u662f\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\uff1b\u7528Go\u8bed\u8a00\u7684\u672f\u8bed\u8bf4\uff0c\u8fd9\u4e2ax\u5c40\u90e8\u53d8\u91cf\u4ece\u51fd\u6570f\u4e2d\u9003\u9038\u4e86\u3002\u76f8\u53cd\uff0c\u5f53g\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u53d8\u91cfy\u5c06\u662f\u4e0d\u53ef\u8fbe\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u9a6c\u4e0a\u88ab\u56de\u6536\u7684\u3002\u56e0\u6b64\uff0cy\u5e76\u6ca1\u6709\u4ece\u51fd\u6570g\u4e2d\u9003\u9038\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u9009\u62e9\u5728\u6808\u4e0a\u5206\u914d*y\u7684\u5b58\u50a8\u7a7a\u95f4\u3002</p>"}]}
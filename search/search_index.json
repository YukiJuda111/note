{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Yuk1's note","text":"<p>my personal note</p>"},{"location":"about/","title":"My github repos","text":"<p>https://github.com/YukiJuda111?tab=repositories</p>"},{"location":"blockchain/course/principle/","title":"Principle of blockchain","text":"<p>\u7528hash\u6821\u9a8c(hash -&gt; 108 -&gt; 205 -&gt; 308...) \u4e00\u4f46\u66f4\u6539\uff0chash\u7ed3\u679c\u51fa\u9519\uff0c\u653e\u5f03\u8be5block\u4ee5\u53ca\u540e\u9762\u5168\u90e8\u7684block </p> <p>\u51fa\u9519\u7684\u5730\u65b9\u548c\u5176\u4ed6\u7684block\u7684tx\u8fdb\u884c\u6bd4\u5bf9 </p>"},{"location":"blockchain/course/principle/#_1","title":"\u5171\u8bc6\u7b97\u6cd5","text":"<p>POW: Proof of Work \u8d5a\u7684\u662fgas fee\uff0c\u8c01\u6700\u5148\u7b97\u51fa\u6765hash\uff0c\u8c01\u5c31\u53ef\u4ee5\u6253\u5305block\u3002\u9a8c\u8bc1\u4ea4\u6613\u540e\u6269\u6563\u8be5\u4ea4\u6613\u5230\u5176\u4ed6\u8282\u70b9\u3002  \uff01Principle of blockchain</p>"},{"location":"blockchain/solidity/ERC-20/","title":"ERC-20","text":""},{"location":"blockchain/solidity/ERC-20/#repoyukijuda111erc20-foundry-githubcom","title":"REPO\uff1aYukiJuda111/ERC20-foundry (github.com)","text":"<p>EIP: ethereum improvement proposals</p> <p>ERC: ethereum request for comments</p> <p>ERC20: one of Tokens standards</p> <p>\u67e5\u770b\u6240\u6709EIP  ERC | Ethereum Improvement Proposals</p> <p>ERC20: \u521d\u59cb\u4ee3\u5e01\u6240\u6709\u8005\u662fconstructor\u4e2d\u7684\u8c03\u7528_mint\u7684msg.sender</p> <p>\u4e00\u5f00\u59cb\u6240\u6709\u4ee3\u5e01\u57280\u5730\u5740\uff0c\u901a\u8fc7_mint\u8c03\u7528\u5c06\u4ee3\u5e01transfer\u5230msg.sender</p> <pre><code>constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n    _mint(msg.sender, initialSupply);\n}\n</code></pre> <pre><code>function _mint(address account, uint256 value) internal {\n    if (account == address(0)) {\n        revert ERC20InvalidReceiver(address(0));\n    }\n    _update(address(0), account, value);\n}\n</code></pre>"},{"location":"blockchain/solidity/NFT/","title":"NFT","text":"<p>\u672c\u8d28\u662fID\u5230\u62e5\u6709\u8005\u5730\u5740\u7684\u6620\u5c04<code>mapping (uint256 =&gt; address) public tokenOwner;</code></p> <p>\u7528metadata\u6765\u63cf\u8ff0NFT\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u7b49\u3002NFT\u7684metadata\u53ef\u4ee5\u5b58\u50a8\u5728\u94fe\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5b58\u50a8\u5728\u94fe\u4e0b\u3002\u5b58\u50a8\u5728\u94fe\u4e0a\u7684metadata\u53ef\u4ee5\u901a\u8fc7IPFS\u6765\u5b9e\u73b0\u3002</p> <p>URI\uff1aNFT\u7684metadata\u7684URI\uff0c\u53ef\u4ee5\u662f\u94fe\u4e0a\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u94fe\u4e0b\u7684\u3002\u94fe\u4e0a\u7684URI\u53ef\u4ee5\u901a\u8fc7IPFS\u6765\u5b9e\u73b0\u3002</p>"},{"location":"blockchain/solidity/raffle/","title":"Raffle","text":""},{"location":"blockchain/solidity/raffle/#repoyukijuda111raffle-foundry-githubcom","title":"REPO:YukiJuda111/Raffle-foundry (github.com)","text":"<p>deployed on sepolia testnet:<code>0x8A689464b4ADf9AeB584ABedC665aF525B4036F3</code></p> <p>Raffle | Address 0x8a689464b4adf9aeb584abedc665af525b4036f3 | Etherscan</p>"},{"location":"blockchain/solidity/raffle/#vrf","title":"VRF","text":"<pre><code>vrfCoordinatorInterfaceV2.requestRandomWords-&gt;chainLink nodes-&gt;(call)fufillRandomwords\n</code></pre> <p>RequestRandomWords</p> <p>The chainlink nodes listen the event edited by requestRandomWords function call</p> <pre><code>function performUpkeep(bytes calldata ) external override {\n   (bool upkeepNeeded,) = checkUpkeep(bytes(\"\"));\n   if(!upkeepNeeded){\n        revert Raffle__NotPerformUpkeep(address(this).balance, s_players.length, uint256(s_raffleState));\n   }\n    // Request the RNG\n    // https://docs.chain.link/vrf/v2/subscription/supported-networks\n    s_raffleState = RaffleState.CALCULATING;\n\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\n        i_gasLane, // gas lane\n        i_subscriptionId,\n        REQUEST_CONFIRMATIONS,\n        i_callbackGasLimit,\n        NUM_WORDS\n    );\n    emit RequestedRaffleWinner(requestId);\n}\n</code></pre> <p>fufillRandomwords(called by chainlink nodes)</p> <p>ChainlinkVRF</p> <p>override the function provided in VrfCoordinatorV2Interface</p> <pre><code>function fulfillRandomWords(\n    uint256 ,\n    uint256[] memory randomWord\n) internal override {\n    uint256 winnerIndex = randomWord[0] % s_players.length;\n    s_recentWinner = s_players[winnerIndex];\n    s_raffleState = RaffleState.OPEN;\n    s_lastTimeStamp = block.timestamp;\n    s_players = new address payable[](0);\n    emit PickedWinner(s_recentWinner);\n\n    (bool success, ) = s_recentWinner.call{value: address(this).balance}(\"\");\n    if(!success) {\n        revert Raffle__TranferFailed();\n    }\n}\n</code></pre>"},{"location":"blockchain/solidity/raffle/#automation","title":"Automation","text":"<p>Override <code>checkUpkeep</code> to set the condition.</p> <pre><code>function checkUpkeep(\n    bytes memory \n)\n    public\n    view\n    override\n    returns (bool upkeepNeeded, bytes memory /* performData */)\n{\n    bool timeSatisfied = (block.timestamp - s_lastTimeStamp) &gt; i_interval;\n    bool raffleOpen = s_raffleState == RaffleState.OPEN;\n    bool hasPlayers = s_players.length &gt; 0;\n    bool hasBalance = address(this).balance &gt; 0;\n    bool doUpkeep = timeSatisfied &amp;&amp; raffleOpen &amp;&amp; hasPlayers &amp;&amp; hasBalance;\n    return (doUpkeep, \"\");\n}\n</code></pre> <p>Override <code>performUpkeep</code> to set the performing function called by chainlink nodes.</p> <p>The front end to do upkeep : Automation | Chainlink</p>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Yuk1's note","text":"<p>my personal note</p>"},{"location":"about/","title":"My github repos","text":"<p>https://github.com/YukiJuda111?tab=repositories</p>"},{"location":"blockchain/solidity/raffle/","title":"Raffle","text":"<p>deployed on sepolia testnet:<code>0x8A689464b4ADf9AeB584ABedC665aF525B4036F3</code></p> <p>Raffle | Address 0x8a689464b4adf9aeb584abedc665af525b4036f3 | Etherscan</p>"},{"location":"blockchain/solidity/raffle/#vrf","title":"VRF","text":"<pre><code>vrfCoordinatorInterfaceV2.requestRandomWords-&gt;chainLink nodes-&gt;(call)fufillRandomwords\n</code></pre> <p>RequestRandomWords</p> <p>The chainlink nodes listen the event edited by requestRandomWords function call</p> <pre><code>function performUpkeep(bytes calldata ) external override {\n   (bool upkeepNeeded,) = checkUpkeep(bytes(\"\"));\n   if(!upkeepNeeded){\n        revert Raffle__NotPerformUpkeep(address(this).balance, s_players.length, uint256(s_raffleState));\n   }\n    // Request the RNG\n    // https://docs.chain.link/vrf/v2/subscription/supported-networks\n    s_raffleState = RaffleState.CALCULATING;\n\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\n        i_gasLane, // gas lane\n        i_subscriptionId,\n        REQUEST_CONFIRMATIONS,\n        i_callbackGasLimit,\n        NUM_WORDS\n    );\n    emit RequestedRaffleWinner(requestId);\n}\n</code></pre> <p>fufillRandomwords(called by chainlink nodes)</p> <p>https://vrf.chain.link/</p> <p>override the function provided in VrfCoordinatorV2Interface</p> <pre><code>function fulfillRandomWords(\n    uint256 ,\n    uint256[] memory randomWord\n) internal override {\n    uint256 winnerIndex = randomWord[0] % s_players.length;\n    s_recentWinner = s_players[winnerIndex];\n    s_raffleState = RaffleState.OPEN;\n    s_lastTimeStamp = block.timestamp;\n    s_players = new address payable[](0);\n    emit PickedWinner(s_recentWinner);\n\n    (bool success, ) = s_recentWinner.call{value: address(this).balance}(\"\");\n    if(!success) {\n        revert Raffle__TranferFailed();\n    }\n}\n</code></pre>"},{"location":"blockchain/solidity/raffle/#automation","title":"Automation","text":"<p>Override <code>checkUpkeep</code> to set the condition.</p> <pre><code>function checkUpkeep(\n    bytes memory \n)\n    public\n    view\n    override\n    returns (bool upkeepNeeded, bytes memory /* performData */)\n{\n    bool timeSatisfied = (block.timestamp - s_lastTimeStamp) &gt; i_interval;\n    bool raffleOpen = s_raffleState == RaffleState.OPEN;\n    bool hasPlayers = s_players.length &gt; 0;\n    bool hasBalance = address(this).balance &gt; 0;\n    bool doUpkeep = timeSatisfied &amp;&amp; raffleOpen &amp;&amp; hasPlayers &amp;&amp; hasBalance;\n    return (doUpkeep, \"\");\n}\n</code></pre> <p>Override <code>performUpkeep</code> to set the performing function called by chainlink nodes.</p> <p>The front end to do upkeep : Automation | Chainlink</p>"}]}